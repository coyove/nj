assert( "abc" == "abc")
-- assert( "abc" == "\97\98\99")
assert( "abc" == "\x61\x62\x63")
local abc = "abc" 
assert( "abc吱吱吱" == abc + "吱吱" + "吱")
assert( "abc吱吱吱" == "abc\u5431\u5431\u5431")

assert(1 + "2" == "12")

local a, b, c, d = re([["(\d+)"]]).findall("a\"12\" \"2\"3")
assert(a == [["12"]] and b == "12" and c == [["2"]] and d == "2")

local err = error("err")
print("reflectLoad: ", err.Error())
assert(err.Error() == "err")
assert("eerrrr" == re("(e|r)").replace(err.Error(), "$1$1"))

assert("x" == str:from("嘻x嘻").trim("嘻"))
assert("嘻x" == str:from("嘻x嘻").rtrim("嘻"))
assert("x嘻" == str:from("嘻x嘻").ltrim("嘻"))

-- assert(("abc")[1:2] == "ab")
-- assert(("abc")[3:3] == "c")
-- assert(("abc")[1:0] == "")
-- assert(("cde")[str.decode_utf8("b")[1] - str.decode_utf8("a")[1]:2] == "cd")
-- assert(("efg")[str.decode_utf8("b")[1] - str.decode_utf8("a")[1]: str.decode_utf8("c")[1] - str.decode_utf8("a")[1]] == "ef")

-- json generator
do
	str.json_get = json:get
	local j = json:stringify({
	      a = 'A',
	      ["b-2"] = true,
	})
    assert(j.json_get('a'), 'A')
end

function str.reverse(s)
	x = str:buffer()
	s = s.chars()
	for i=len(s)-1,-1,-1 do
		x.write(s[i])
	end
	print (parent(x))
	return x.value()
end
assert(("abc")==(str:from("cba").reverse()))
assert(("あbc")==(str:from("cbあ").reverse()))
