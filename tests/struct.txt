timer = {c=0,X=10}
function timer.reset(self)
    self.c = 0
end
function timer.add(self, v)
    self.c = self.c + v + self.X
end
T1, T2 = new(timer), new(timer)
T1.add(2)
T2.add(3)
assert(T1.c == 12 and T2.c == 13)

println(T1.c, T2.c)
T1.X = 100
println(T1.c, T2.c)
T1.add(20)
println(T1.c, T2.c)
T2.add(30)
assert(T1.c == 132 and T2.c == 53)

another = {f=timer.add}
x = {X=1e3,c=-1}
another.f(x, 10)
assert(x.c == 1009)

print(timer.add)

out = {}
A = {a="A"}
function A.foo(v)
    print("A:", v.a)
    out[len(out)] = "A:" + v.a
end

B1 = new(A)

B2 = new(A)
function B2.foo(v)
    print("B2:", v.a)
    out[len(out)] = "B2:" + v.a
end

C1 = new(B1)
C1.a = "C1"
C1.foo()

C2 = new(B2)
C2.a = "C2"
C2.foo()

C3 = new(B2)
function C3.foo(v)
    print("C3:", v.a)
    out[len(out)] = "C3:" + v.a
    parent(C3).foo()
end
C3.a = "C3"
C3.foo()

D4 = new(C3)
function D4.foo(v)
    print("D4:", v.a)
    out[len(out)] = "D4:" + v.a
    parent(D4).foo()
end
D4.a = "D4"
D4.b = 'z'
D4.b = 'zz' -- repeat setting
assert(D4.b == 'zz')
D4.foo()

assert(out[0] == 'A:C1')
assert(out[1] == 'B2:C2')
assert(out[2] == 'C3:C3')
assert(out[3] == 'B2:C3')
assert(out[4] == 'D4:D4')
assert(out[5] == 'C3:D4')
assert(out[6] == 'B2:D4')

dict={_iter=undefined}
function dict.next(self)
    local k, v
    if self._iter == undefined then
        k, v = next(self)
    else
        k, v = next(self, self._iter)
    end
    if k == nil then
        self._iter = undefined
    else
        self._iter = k
    end
    return k, v
end

m = new(dict)
m[0] = 0
m[true] = false
m.zz = 'zz'
while true do
    k, v = m.next()
    print(k ,v)
    if k == nil then
        break
    end
    assert(m[k] == v)
    println(k ,v)
end

cnt = 0
k = 99
for k, v in m do
    cnt = cnt + 1
    assert(m[k] == v)
end
assert(cnt == 3)
assert(k == 99) -- k shouldn't be altered

function worker()
    sleep(1)
    print("worker after 1s")
    return 'finished'
end
g = go.new(worker)
g.start()
assert(g.wait() == 'finished')

Car = {_brand=''}
function Car.get_brand(this)
	if this._brand then return str.from('a %s car #%d').format(this._brand, this.index) end
	return 'a car'
end
Benz = prototype(Car, {_brand='benz'})
Honda = prototype(Car, {_brand='honda'})

b0 = new(Car)
b1 = new(Benz, {index=1})
b2 = new(Benz, {index=2})
b3 = new(Honda, {index=3})
println(b0.get_brand(), b1.get_brand(), b2.get_brand(), b3.get_brand())


-- closure
function foo(a)
    return closure(lambda(a, b)
        return closure(lambda(m, c)
            m.a = m.a + 1
            if c == 6 then panic(m.a + m.b + c) end
            return m.a + m.b + c
        end, a=a, b=b)
    end, a)
end
bar = foo(2)(3)
assert(bar(4), 10)
assert(bar(5), 12)

bar = apply(foo(2), 3)
assert(bar(4), 10)
assert(bar(5), 12)
assert(pcall(bar, 6), 14)

-- syntax test
m = {}
function m.a() return 'a' end
assert(m.a() == 'a')

cls = {}
cls.__str = lambda(o) return o.v end
cls2 = prototype(cls)
cls2.__str = lambda(o) return o.v + '2' end
obj = new(cls, v='obj')
obj2 = new(cls2, v='obj')
assert(str(obj), 'obj')
assert(str(obj2), 'obj2')
print(obj2)

