timer = {}
function timer.reset(self)
    self.c = 0
end
function timer.add(self, v)
    self.c = self.c + v + self.X
end
T1, T2 = new(timer, c=0,X=10), new(timer, c=0,X=10)
T1.add(2)
T2.add(3)
assert(T1.c == 12 and T2.c == 13)

println(T1.c, T2.c)
T1.X = 100
println(T1.c, T2.c)
T1.add(20)
println(T1.c, T2.c)
T2.add(30)
assert(T1.c == 132 and T2.c == 53)

another = {f=timer.add}
x = {X=1e3,c=-1}
another:f(x, 10)
assert(x.c == 1009)

print(timer.add)

dict={}
function dict.__call(self) return new(new(self)) end

function dict.next(self)
    local k, v = next(self, parent(self)._iter)
    parent(self)._iter = k
    return k, v
end

m = dict()
m[0] = 0
m[true] = false
m.zz = 'zz'
while true do
    k, v = m.next()
    print(k ,v)
    if k == nil then
        break
    end
    assert(m[k] == v)
    println(k ,v)
end

CarPrototype = {}
function CarPrototype.getBrand(this) return this.brand end
function CarPrototype.setBrand(this, brand) this.brand = brand; return this end
function CarPrototype.__str(this) return ('%s %s').format(this.color, this.brand) end

Car = prototype(CarPrototype, {brand=''})
function Car.__new(this) return table:copy(this) end

carA = new(Car, color='red').setBrand('ferrari')
carB = new(Car, color='orange').setBrand('mclaren')

assert(str(carA), "red ferrari")
assert(str(carB), "orange mclaren")

cnt = 0
k = 99
for k, v in m do
    cnt = cnt + 1
    assert(m[k] == v)
end
assert(cnt == 3)
assert(k == 99) -- k shouldn't be altered

function worker()
    sleep(1)
    print("worker after 1s")
    return 'finished'
end
assert(sync:map({0}, worker)[0] == 'finished')

-- closure
function foo(a)
    return closure(lambda(a, b)
        return closure(lambda(m, c)
            m.a = m.a + 1
            if c == 6 then panic(m.a + m.b + c) end
            return m.a + m.b + c
        end, a=a, b=b)
    end, a)
end
bar = foo(2)(3)
assert(bar(4), 10)
assert(bar(5), 12)

bar = foo(2)(3)
assert(bar(4), 10)
assert(bar(5), 12)
assert(pcall(bar, 6), 14)

-- syntax test
m = {}
function m.a() return 'a' end
assert(m.a() == 'a')

cls = {}
cls.__str = lambda(o) return o.v end
cls2 = {__str= lambda(o) return o.v + '2' end}
cls2 = new(cls, cls2)
obj = new(cls, v='obj')
obj2 = new(cls2, v='obj')
assert(str(obj), 'obj')
assert(str(obj2), 'obj2')
print(obj2)

t = table(a=1, b=2)
t2 = t.copy()
t.b =3
assert(t2.b, 2)

t = table({1,2,3,4}).filter(lambda(v) return v >= 2 end)
assert(t[0] == 2 and t[2] == 4)


f1 = open("tests/a.txt", "w+")
f1.write("hello zzz")
f1.close()

f1 = open("tests/a.txt", "r")
f2 = open("tests/b.txt", "w+")
f2.write(f1.read(5))
f1.close()
f2.write(" world")
f2.close()

assert(open("tests/b.txt").read(), "hello world")

os:remove("tests/a.txt")
os:remove("tests/b.txt")
