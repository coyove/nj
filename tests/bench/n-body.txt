n =0 
pi = 3.14159265358 
solarMass = 4 *pi*pi 
daysPerYear =365.24 
N = 5 

 sysV = [ 
    [
        0.0,
        0.0, 
        0.0, 
        solarMass
    ],
    [
        1.66007664274403694e-03 *daysPerYear,
        7.69901118419740425e-03 *daysPerYear,
        -6.90460016972063023e-05* daysPerYear,
        9.54791938424326609e-04 *solarMass
    ],
    [
        -2.76742510726862411e-03*daysPerYear,
        4.99852801234917238e-03 *daysPerYear,
        2.30417297573763929e-05 *daysPerYear,
        2.85885980666130812e-04 *solarMass
    ],
    [
        2.96460137564761618e-03 *daysPerYear,
        2.37847173959480950e-03 *daysPerYear,
        -2.96589568540237556e-05* daysPerYear,
        4.36624404335156298e-05 *solarMass
    ],
    [
        2.68067772490389322e-03 *daysPerYear,
        1.62824170038242295e-03 *daysPerYear,
        -9.51592254519715870e-05* daysPerYear,
        5.15138902046611451e-05 *solarMass
    ]
]
sysS = [
    [ 0.0,0.0,0.0 ],
    [ 4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01 ],
    [ 8.34336671824457987e+00, 4.12479856412430479e+00 , -4.03523417114321381e-01 ],
    [ 1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01 ],
    [ 1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01  ]
] 

function offsetMomentum()
    px=0
    py=0
    pz = 0 
    for i = 0, N do
         m = sysV[i][3] 
        px = px + sysV[i][0] * m 
        py = py + sysV[i][1] * m 
        pz = pz + sysV[i][2] * m 
    end

    sysV[0][0] = (-px) / solarMass 
    sysV[0][1] = (-py) / solarMass 
    sysV[0][2] = (-pz) / solarMass 
end

sqrt = math.sqrt 
function energy()
    e = 0
    for i=0, N do
        x = sysV[i][0]
        y = sysV[i][1]
        z = sysV[i][2] 

        e = e + sysV[i][3] * 0.5 * (x * x + y * y + z * z) 

        for j = i+1,N do
            dx = sysS[i][0] - sysS[j][0] 
            dy = sysS[i][1] - sysS[j][1] 
            dz = sysS[i][2] - sysS[j][2] 

            distance = sqrt(dx * dx + dy * dy + dz * dz) 
            e = e - sysV[i][3] * sysV[j][3] / distance 
        end
    end
    return e 
end

function advance(dt)
    for i=0, N - 1 do
        sysVi = sysV[i]
        sysSi = sysS[i]  

        _vx = sysVi[0] 
        _vy = sysVi[1] 
        _vz = sysVi[2] 
        for j = i+1, N do
            sysSj = sysS[j] 
            sysVj = sysV[j] 

            dx = sysSi[0] - sysSj[0] 
            dy = sysSi[1] - sysSj[1] 
            dz = sysSi[2] - sysSj[2] 

            dSquared = dx * dx + dy * dy + dz * dz 
            distance = sqrt(dSquared) 
            mag = dt / (dSquared * distance) 

            mi = sysVi[3] * mag
            m = -sysVj[3] * mag

            _vx = _vx + dx * m
            _vy = _vy + dy * m
            _vz = _vz + dz * m

            sysVj[0] = sysVj[0] + dx * mi
            sysVj[1] = sysVj[1] + dy * mi
            sysVj[2] = sysVj[2] + dz * mi
        end

        sysVi[0] = _vx
        sysVi[1] = _vy
        sysVi[2] = _vz
    end

    for i = 0, N do
        sysSi = sysS[i]
        sysVi = sysV[i]
        sysSi[0] = sysSi[0] + dt * sysVi[0]
        sysSi[1] = sysSi[1] + dt * sysVi[1]
        sysSi[2] = sysSi[2] + dt * sysVi[2]
    end
end

offsetMomentum() 
println(energy()) 

for i=0, 500000 do
    advance(0.01) 
end

println(energy()) 
