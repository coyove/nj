n =0 
pi = 3.14159265358 
solarMass = 4 *pi*pi 
daysPerYear =365.24 
N = 5 

 sysV = { 
    {
        x=0.0,
        y=0.0, 
        z=0.0, 
        m=solarMass
    },
    {
        x=1.66007664274403694e-03 *daysPerYear,
        y=7.69901118419740425e-03 *daysPerYear,
        z=-6.90460016972063023e-05* daysPerYear,
        m=9.54791938424326609e-04 *solarMass
    },
    {
        x=-2.76742510726862411e-03*daysPerYear,
        y=4.99852801234917238e-03 *daysPerYear,
        z=2.30417297573763929e-05 *daysPerYear,
        m=2.85885980666130812e-04 *solarMass
    },
    {
        x=2.96460137564761618e-03 *daysPerYear,
        y=2.37847173959480950e-03 *daysPerYear,
        z=-2.96589568540237556e-05* daysPerYear,
        m=4.36624404335156298e-05 *solarMass
    },
    {
        x=2.68067772490389322e-03 *daysPerYear,
        y=1.62824170038242295e-03 *daysPerYear,
        z=-9.51592254519715870e-05* daysPerYear,
        m=5.15138902046611451e-05 *solarMass
    }
} 
 sysS = {
    { x=0.0,y=0.0, z=0.0 },
    { x=4.84143144246472090e+00, y=-1.16032004402742839e+00,  z=-1.03622044471123109e-01 },
    { x=8.34336671824457987e+00, y=4.12479856412430479e+00 ,  z=-4.03523417114321381e-01 },
    { x=1.28943695621391310e+01, y=-1.51111514016986312e+01,  z=-2.23307578892655734e-01 },
    { x=1.53796971148509165e+01, y=-2.59193146099879641e+01,  z=1.79258772950371181e-01}
} 

function offsetMomentum()
    px=0
    py=0
    pz = 0 
    for i = 0, N do
         m = sysV[i].m 
        px = px + sysV[i].x * m 
        py = py + sysV[i].y * m 
        pz = pz + sysV[i].z * m 
    end

    sysV[0].x = -px / solarMass 
    sysV[0].y = -py / solarMass 
    sysV[0].z = -pz / solarMass 
end

sqrt = math:sqrt 
function energy()
     e =0
    for i=0,N  do
         x = sysV[i].x
         y= sysV[i].y
         z=sysV[i].z 

        e = e + sysV[i].m * 0.5 * (x * x + y * y + z * z) 

        for j = i+1,N do
             dx = sysS[i].x - sysS[j].x 
             dy = sysS[i].y - sysS[j].y 
             dz = sysS[i].z - sysS[j].z 

             distance = sqrt(dx * dx + dy * dy + dz * dz) 
            e = e - sysV[i].m * sysV[j].m / distance 
        end
    end
    return e 
end

function advance(dt)
    for i=0, N - 1 do
        sysVi = sysV[i]
        sysSi = sysS[i]  

        _vx = sysVi.x 
        _vy = sysVi.y 
        _vz = sysVi.z 
        for j =i+1, N do
            sysSj = sysS[j] 
            sysVj = sysV[j] 

            dx = sysSi.x - sysSj.x 
            dy = sysSi.y - sysSj.y 
            dz = sysSi.z - sysSj.z 

            dSquared = dx * dx + dy * dy + dz * dz 
            distance = sqrt(dSquared) 
            mag = dt / (dSquared * distance) 

            mi = sysVi.m * mag 
            m = -sysVj.m * mag 

            _vx = _vx + dx * m 
            _vy = _vy + dy * m 
            _vz = _vz + dz * m 

            sysVj.x = sysVj.x + dx * mi 
            sysVj.y = sysVj.y + dy * mi 
            sysVj.z = sysVj.z + dz * mi 
        end

        sysVi.x = _vx 
        sysVi.y = _vy 
        sysVi.z = _vz 
    end

     for i = 0, N do
        sysSi = sysS[i] 
        sysVi = sysV[i] 
        sysSi.x = sysSi.x + dt * sysVi.x 
        sysSi.y = sysSi.y + dt * sysVi.y 
        sysSi.z = sysSi.z + dt * sysVi.z 
    end
end

offsetMomentum() 
println(energy()) 

for i=0, 500000 do
    advance(0.01) 
end

println(energy()) 
