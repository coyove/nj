n = 0 
nCPU = 4

function A(i, j)
    return ((i+j)*(i+j+1)/2 + i + 1) 
end

function TimesVec(v, s, n, u, wg)
    ul = len(u) 
    for i = s, n do
        vi = 0 
        for j = 0,ul do
            vi = vi + u[j] / A(i, j) 
        end
        v[i] = vi 
    end
    wg.Done() 
end

function TimesTranspVec(v, s, n, u, wg) 
    ul = len(u) 
    for i = s, n do
        vi = 0 
        for j = 0,ul do
            vi = vi + u[j] / A(j, i) 
        end
        v[i] = vi 
    end
    wg.Done() 
end

function ATimesTransp(v, u)
    x = table.makearray(len(u)) 
    wg = sync.waitgroup() 

    for i = 0, nCPU do
        wg.Add(1) 
        go.new(TimesVec).start(x, i*len(v)/nCPU, (i+1)*len(v)/nCPU, u, wg)
    end
    wg.Wait() 

    for i = 0, nCPU do
        wg.Add(1) 
        go.new(TimesTranspVec).start(v, i*len(v)/nCPU, (i+1)*len(v)/nCPU, x, wg)
    end
    wg.Wait() 
end

n = 5500
u = {} 
v = {} 
 
for idx = 0, n do
    u[idx] = 1 
    v[idx] = 0 
end

for i = 0, 9 do
    ATimesTransp(v, u) 
    ATimesTransp(u, v) 
end

vBv = 0
vv = 0 
for i = 0, len(v) do
    vBv = vBv + u[i] * v[i]
    vv = vv + v[i] * v[i]
end

println(math.sqrt(vBv/vv)) 
    
