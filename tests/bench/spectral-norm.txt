n = 0 
nCPU = os.numcpus

function A(i, j)
    return ((i+j)*(i+j+1)//2 + i + 1) 
end

function TimesVec(k, args)
    local v, s, n, u = args
    ul = #(u) 
    for i = int(s),int(n) do
        vi = 0 
        for j = 0,ul do
            vi = vi + u[j] / A(i, j) 
        end
        v[i] = vi 
    end
end

function TimesTranspVec(k, args)
    local v, s, n, u = args
    ul = #(u) 
    for i = int(s),int(n) do
        vi = 0 
        for j = 0,ul do
            vi = vi + u[j] / A(j, i) 
        end
        v[i] = vi 
    end
end

function ATimesTransp(v, u)
    x = array.make(#u) 

    payload = []
    for i = 0, nCPU do
        payload.append([x, i* #(v)/nCPU, (i+1)*#(v)/nCPU, u])
    end
    TimesVec.map(payload, os.numcpus)

    payload.clear()
    for i = 0, nCPU do
        payload.append([v, i*#(v)/nCPU, (i+1)*#(v)/nCPU, x])
    end
     TimesTranspVec.map(payload, os.numcpus)
end

n = 550
u = array.make(n) 
v = array.make(n) 
 
for idx = 0, n do
    u[idx] = 1 
    v[idx] = 0 
end

for i = 0, 10 do
    ATimesTransp(v, u) 
    ATimesTransp(u, v) 
end

vBv = 0
vv = 0 
for i = 0, #(v) do
    vBv = vBv + u[i] * v[i]
    vv = vv + v[i] * v[i]
end

println(math.sqrt(vBv/vv)) 
    
