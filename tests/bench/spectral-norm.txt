n = 0 
nCPU = 4

function A(i, j)
    return ((i+j)*(i+j+1)//2 + i + 1) 
end

function TimesVec(k, args)
    local v, s, n, u = args
    ul = len(u) 
    for i = int(s),int(n) do
        vi = 0 
        for j = 0,ul do
            vi = vi + u[j] / A(i, j) 
        end
        v[i] = vi 
    end
end

function TimesTranspVec(k, args)
    local v, s, n, u = args
    ul = len(u) 
    for i = int(s),int(n) do
        vi = 0 
        for j = 0,ul do
            vi = vi + u[j] / A(j, i) 
        end
        v[i] = vi 
    end
end

function ATimesTransp(v, u)
    x = table:makearray(len(u)) 

    payload = table()
    for i = 0, nCPU do
        payload.append({x, i*len(v)/nCPU, (i+1)*len(v)/nCPU, u})
    end
    sync:map(payload, TimesVec, n=nCPU)

    payload.clear()
    for i = 0, nCPU do
        payload.append({v, i*len(v)/nCPU, (i+1)*len(v)/nCPU, x})
    end
    sync:map(payload, TimesTranspVec, n=nCPU)
end

n = 5500
u = {} 
v = {} 
 
for idx = 0, n do
    u[idx] = 1 
    v[idx] = 0 
end

for i = 0, 9 do
    ATimesTransp(v, u) 
    ATimesTransp(u, v) 
end

vBv = 0
vv = 0 
for i = 0, len(v) do
    vBv = vBv + u[i] * v[i]
    vv = vv + v[i] * v[i]
end

println(math:sqrt(vBv/vv)) 
    
