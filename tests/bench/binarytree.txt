n = 21

function bottomUpTree(depth)
   if (depth <= 0) then return {} end
   return { left=bottomUpTree(depth-1), right=bottomUpTree(depth-1) } 
end

function itemCheck(n)
    if (len(n) == 0) then return 1 end
    return itemCheck(n.left) + itemCheck(n.right) + 1
end

minDepth = 4 
maxDepth = n 
if (minDepth + 2 > n) then maxDepth = minDepth + 2 end
stretchDepth = maxDepth + 1 

check_l = itemCheck(bottomUpTree(stretchDepth)) 
print(str.from("stretch tree of depth %d\t check: %v").format(stretchDepth, check_l) )
return

longLivedTree = bottomUpTree(maxDepth) 
result = array.makearray(maxDepth+1) 

function worker(k, args)
    local depth, check = args[0], args[1]
    iterations = 1 << (maxDepth - depth + minDepth) 
    check = 0 

    for i = 0,iterations do
        check = check + itemCheck(bottomUpTree(depth)) 
    end
    result[depth] = str.from("%d\t trees of depth %d\t check: %v").format(iterations, depth, check)
end

payload = []
for depth_l = minDepth,maxDepth,2 do
    payload.append([depth_l, check_l])
end
sync.map(payload, worker)

for depth = minDepth,maxDepth,2 do
    print(result[depth]) 
end

print(str.from("long lived tree of depth %d\t check: %v\n").format(maxDepth, itemCheck(longLivedTree)))
