limit = 4.0 
maxIter = 50 
rows = 0 
bytesPerRow = 0 
initial_r = 0 
initial_i = 0 

function renderRow(y0)
    local row = "" 
    for xByte = 0, bytesPerRow do
        local res = 0 
        local Ci = initial_i[y0] 

        for i=0,8,2 do
            local x = xByte<<3 
            local Cr1 = initial_r[x+i] 
            local Cr2 = initial_r[x+i+1] 

            local Zr1=Cr1 
            local Zi1=Ci 
            local Zr2=Cr2 
            local Zi2=Ci 

            local b=0 

            for j = 0,maxIter do
                local Tr1 = Zr1*Zr1 
                local Ti1 = Zi1*Zi1 
                Zi1 = (2*Zr1*Zi1)+Ci 
                Zr1 = (Tr1-Ti1)+Cr1 

                if (Tr1+Ti1>limit) then
                    b = b | 2 
                    if (b == 3) then break end
                end

                local Tr2 = Zr2*Zr2 
                local Ti2 = Zi2*Zi2 
                Zi2 = (2*Zr2*Zi2)+Ci 
                Zr2 = Tr2-Ti2+Cr2 

                if (Tr2+Ti2>limit) then
                    b = b | 1 
                    if (b == 3) then break end
                end
            end
            res = (res<<2) | b 
        end

        row = row + byte((~res) & 0xFF)
        -- print((~res) & 0xFF)
    end
    return row 
end

size = 16000
nCPU = 4
bytesPerRow = size >> 3 

initial_r = array.make(size) 
initial_i = array.make(size) 

inv = 2 / size 
for xy =0, size do
    i = inv * xy 
    initial_r[xy] = i - 1.5 
    initial_i[xy] = i - 1.0 
end

rows = array.make(size) 
y = -1 
mux = sync.mutex() 
wg = sync.waitgroup() 
wg.Add(nCPU)

function worker()
    while (y < size) do
        mux.Lock() 
        y = y + 1 
        local y0 = y 
        mux.Unlock() 
        if (y0 < size) then
            rows[y0] = renderRow(y0) 
        end 
    end
    wg.Done() 
end 

for i = 0,nCPU do
    worker.go()
end
wg.Wait() 
-- return

write(__G.Stdout, "P4\n" + (size) + " " + (size) + "\n") 
for i = 0, len(rows) do
    write(__G.Stdout, rows[i]) 
end
