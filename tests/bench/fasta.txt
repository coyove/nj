WIDTH = 60 -- Fold lines after WIDTH bytes
out = bytes(0)
min = math.min

--[[type AminoAcid struct {
   p float64
   c byte
}]]

function AccumulateProbabilities(genelist)
    for i=1,#genelist do
        genelist[i][0] += genelist[i-1][0]
    end
end

-- RepeatFasta prints the characters of the byte slice s. When it
-- reaches the end of the slice, it goes back to the beginning.
-- It stops after generating count characters.
-- After each WIDTH characters it prints a newline.
-- It assumes that WIDTH <= len(s) + 1.
function RepeatFasta(s, count)
    local pos = 0
    local s2 = bytes(#s+WIDTH)
    s2.copy(0, #s2, s)
    s2.copy(#s, #s2, s)
    while count > 0 do
       local line = min(WIDTH, count)
       out.concat(s2[pos : pos+line])
       out.append(10) -- '\n'
       pos += line
       if pos >= #s then
            pos -= #s
       end
       count -= line
    end
end

IM = 139968
IA = 3877
IC = 29573

lastrandom = 42

function generateRandom(buf)
    for i, _ in buf do
        lastrandom = (lastrandom*IA + IC) % IM
        buf[i] = lastrandom / IM
    end
end

-- generateDna generates DNA text from random sequence.
-- Each element of genelist is a struct with a character and
-- a floating point number p between 0 and 1.
-- generateDna takes a random float r and
-- finds the first element such that p >= r.
-- This is a weighted random selection.
function generateDna(genelist, rb, wb)
    local count = #rb
    local i = 0
    local o = 0
    while count > 0 do
        local line = min(WIDTH, count)
        count -= line
        for j=0,line do
            local r = rb[i]
            for i, v in genelist do
                if v[0] >= r then
                    wb[o] = v[1]
                    break
                end
            end
            i += 1
            o += 1
        end
        wb[o] = 10 -- '\n'
        o += 1
    end
    return o
end

RANDOM_BUF_SIZE = WIDTH * 1000
OUT_BUF_SIZE    = (WIDTH + 1) * 1000

-- 1 for output, 4 for generateDna, 1 for generateRandom and 2 spaces
SLOT = 8

-- RandomFasta then prints the character of the array element.
-- This sequence is repeated count times.
-- Between each WIDTH consecutive characters, the function prints a newline.
function RandomFasta(genelist, count)
    local rbufs = array.make(SLOT)
    local wbufs = array.make(SLOT)
    for i, _ in rbufs do
        rbufs[i] = array.make(RANDOM_BUF_SIZE)
        wbufs[i] = bytes(OUT_BUF_SIZE)
    end

    -- Use `chan []byte` as future object. och is queue of future.
    local och = channel(4)
    local done = channel(0)
    function()
        for bc in self.och do
            local buf, _ = bc.recv()
            out.concat(buf)
        end
        self.done.send(true)
    end.go()

    local i = 0
    while count > 0 do
        local chunk = min(count, RANDOM_BUF_SIZE)
        count -= chunk
        local rb = rbufs[i%SLOT][:chunk]
        local wb = wbufs[i%SLOT]
        generateRandom(rb)

        local c = channel(1)
        och.send(c)
        function(rb, wb, c)
            local o = generateDna(self.genelist, rb, wb)
            c.send(wb[:o])
        end.go(rb, wb, c)
        i += 1
    end
    och.close()
    done.recv()
end

local n = 25000000

local iub = [
      [0.27, 'a'[0]],
      [0.12, 'c'[0]],
      [0.12, 'g'[0]],
      [0.27, 't'[0]],
      [0.02, 'B'[0]],
      [0.02, 'D'[0]],
      [0.02, 'H'[0]],
      [0.02, 'K'[0]],
      [0.02, 'M'[0]],
      [0.02, 'N'[0]],
      [0.02, 'R'[0]],
      [0.02, 'S'[0]],
      [0.02, 'V'[0]],
      [0.02, 'W'[0]],
      [0.02, 'Y'[0]],
]

local homosapiens = [
      [0.3029549426680, 'a'[0]],
      [0.1979883004921, 'c'[0]],
      [0.1975473066391, 'g'[0]],
      [0.3015094502008, 't'[0]],
]

   AccumulateProbabilities(iub)
   AccumulateProbabilities(homosapiens)

local alu = bytes(
      "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG" +
         "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA" +
         "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT" +
         "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA" +
         "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG" +
         "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC" +
         "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA")

   out.concat(bytes(">ONE Homo sapiens alu\n"))
   RepeatFasta(alu, 2*n)
   out.concat(bytes(">TWO IUB ambiguity codes\n"))
   RandomFasta(iub, 3*n)
   out.concat(bytes(">THREE Homo sapiens frequency\n"))
   RandomFasta(homosapiens, 5*n)

   -- io.write(os.stdout, out)
