a = 2
b = (a + 1) / (a - 1)
assert( b == 3)
assert( "sep0")

assert( (a + 1) / (a - 1) == 3)
assert( "sep1")

assert( 3 == (a + 1) / (a - 1))
assert( "sep2")

assert( (a + 1) == (a + 1) / (a - 1))
assert( "sep3")

function sub1(a) return a - 1 end
assert( (a + 1) == (a + 1) / sub1(a))
assert( "sep4")

assert( a + (a + (a + (a + 1))) == 9)
assert( "sep5")

assert( 1 + (1 + (1 + (1 + a))) == 6)
assert( "sep6")

c = [ 1,2,3,4 ]
assert( 1 + (1 + (1 + (1 + a))) + #(c) , 10)
assert( "sep7")

 a = 10
assert( 1 + (1 + a) == 12)

function foo1(a, b, c)
return a, b, c
end

local a, b, c = foo1(1, 2, 3)
assert(a == 1 and b + c == 5)

function foo1(a, b, c, x)
    local tmp = [a, b, c]
	if x then
		for i = 0, #(x) do tmp.append(x[i]) end
	end
    return tmp
end

local _, _, _, x,y = foo1(1,2,3,["4",5])
assert(x == "4" and y == 5)

function remove(el, arr)
    for i=0, #(arr) do
	    if arr[i] == el then
            for i=i,#(arr)-1 do
                arr[i] = arr[i+1]
            end
            arr[#(arr) - 1] = nil
	        return arr
	    end
    end
    return arr
end

do
	local r = remove(1, [1, 2, 3])
	assert(r[0] == 2 and r[1] == 3)
	local r = remove(2, [1, 2, 3])
	assert(r[0] == 1 and r[1] == 3)
	local r = remove(3, [1, 2, 3])
	println(r)
	assert(r[0] == 1 and r[1] == 2)
end

function bad(n) panic("bad" + n) end
do
	local err = bad.try("boy")
	assert(err.error() == "badboy")
end

function intersect(a, b)
	a.foreach(lambda(b, k, v)
		if not b.contains(k) then return object.DELETE_CONTINUE end
	end.closure(b))
	return a
end

a = intersect({a=1, b=1, c=3}, {a=2, c:4})
assert(a.a, 1)
assert(a.c, 3)

assert(structAddrTest.Foo(), structAddrTest.A)
assert(structAddrTest2.Foo(), structAddrTest2.A)


function foo(a, b, c) return if(a,b,c) end

assert(foo(true, 10, 20), 10)

print('---R2---')

assert(1 is not object)
assert([1,2] is array)
assert([1,2] is native)
assert([1,2] is not nativemap)
assert([1,2] is not object)
assert(native is not object)


function foo(k) debug.self()[k] = k end
for i=0,10 do foo(i) end
for i=0,10 do assert(foo[i], i) end
