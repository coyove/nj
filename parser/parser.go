// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

func ss(yylex yyLexer) *Lexer { return yylex.(*Lexer) }

//line parser.go.y:28
type yySymType struct {
	yys    int
	token  Token
	expr   Node
	token2 *TokenNode
}

const TDo = 57346
const TLocal = 57347
const TElseIf = 57348
const TThen = 57349
const TEnd = 57350
const TBreak = 57351
const TContinue = 57352
const TElse = 57353
const TFor = 57354
const TWhile = 57355
const TFunc = 57356
const TLambda = 57357
const TIf = 57358
const TReturn = 57359
const TReturnVoid = 57360
const TRepeat = 57361
const TUntil = 57362
const TNot = 57363
const TLabel = 57364
const TGoto = 57365
const TIn = 57366
const TLsh = 57367
const TRsh = 57368
const TURsh = 57369
const TDotDotDot = 57370
const TLParen = 57371
const TLBracket = 57372
const TIs = 57373
const TOr = 57374
const TAnd = 57375
const TEqeq = 57376
const TNeq = 57377
const TLte = 57378
const TGte = 57379
const TIdent = 57380
const TNumber = 57381
const TString = 57382
const TIDiv = 57383
const TInv = 57384
const TAddEq = 57385
const TSubEq = 57386
const TMulEq = 57387
const TDivEq = 57388
const TIDivEq = 57389
const TModEq = 57390
const TBitAndEq = 57391
const TBitOrEq = 57392
const TBitXorEq = 57393
const TBitLshEq = 57394
const TBitRshEq = 57395
const TBitURshEq = 57396
const ASSIGN = 57397
const FUNC = 57398
const UNARY = 57399

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TDo",
	"TLocal",
	"TElseIf",
	"TThen",
	"TEnd",
	"TBreak",
	"TContinue",
	"TElse",
	"TFor",
	"TWhile",
	"TFunc",
	"TLambda",
	"TIf",
	"TReturn",
	"TReturnVoid",
	"TRepeat",
	"TUntil",
	"TNot",
	"TLabel",
	"TGoto",
	"TIn",
	"TLsh",
	"TRsh",
	"TURsh",
	"TDotDotDot",
	"TLParen",
	"TLBracket",
	"TIs",
	"TOr",
	"TAnd",
	"TEqeq",
	"TNeq",
	"TLte",
	"TGte",
	"TIdent",
	"TNumber",
	"TString",
	"TIDiv",
	"TInv",
	"TAddEq",
	"TSubEq",
	"TMulEq",
	"TDivEq",
	"TIDivEq",
	"TModEq",
	"TBitAndEq",
	"TBitOrEq",
	"TBitXorEq",
	"TBitLshEq",
	"TBitRshEq",
	"TBitURshEq",
	"'{'",
	"'['",
	"'('",
	"'='",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'#'",
	"'.'",
	"'&'",
	"'|'",
	"'~'",
	"':'",
	"'?'",
	"')'",
	"','",
	"'T'",
	"ASSIGN",
	"FUNC",
	"UNARY",
	"';'",
	"']'",
	"'}'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:300

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 21,
	58, 92,
	75, 92,
	-2, 73,
	-1, 138,
	58, 93,
	75, 93,
	-2, 73,
}

const yyPrivate = 57344

const yyLast = 1908

var yyAct = [...]uint8{
	18, 155, 97, 163, 26, 44, 207, 21, 152, 39,
	67, 196, 195, 166, 216, 112, 164, 244, 43, 233,
	221, 220, 194, 84, 219, 135, 87, 192, 214, 93,
	94, 95, 96, 85, 187, 222, 100, 43, 106, 104,
	167, 107, 136, 145, 66, 21, 178, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 154, 193, 136,
	43, 133, 140, 191, 136, 139, 138, 143, 33, 45,
	69, 188, 92, 89, 31, 42, 68, 68, 98, 147,
	148, 21, 174, 156, 144, 170, 98, 70, 150, 86,
	68, 105, 27, 34, 102, 30, 41, 157, 165, 159,
	161, 40, 38, 171, 151, 66, 99, 169, 37, 36,
	35, 90, 160, 158, 99, 58, 91, 108, 88, 205,
	29, 111, 228, 109, 28, 4, 43, 137, 71, 172,
	3, 7, 10, 176, 177, 103, 179, 56, 57, 59,
	184, 175, 156, 9, 8, 20, 180, 2, 186, 189,
	185, 1, 66, 21, 0, 171, 0, 198, 199, 200,
	0, 0, 58, 202, 0, 21, 0, 0, 0, 0,
	0, 21, 210, 0, 211, 0, 21, 0, 0, 218,
	217, 215, 54, 55, 56, 57, 59, 33, 45, 0,
	0, 0, 0, 173, 0, 225, 226, 0, 0, 0,
	230, 0, 224, 0, 0, 0, 227, 0, 229, 0,
	32, 234, 34, 235, 236, 0, 0, 0, 0, 0,
	21, 0, 243, 21, 0, 21, 0, 37, 36, 35,
	246, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	247, 21, 248, 21, 21, 253, 0, 6, 19, 209,
	21, 254, 12, 13, 208, 24, 22, 0, 33, 25,
	17, 16, 23, 0, 31, 15, 14, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 0,
	0, 32, 27, 34, 0, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 36,
	35, 0, 0, 0, 0, 0, 0, 6, 19, 0,
	29, 255, 12, 13, 28, 24, 22, 0, 33, 25,
	17, 16, 23, 11, 31, 15, 14, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 27, 34, 0, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 36,
	35, 0, 0, 0, 0, 0, 0, 6, 19, 0,
	29, 252, 12, 13, 28, 24, 22, 0, 33, 25,
	17, 16, 23, 11, 31, 15, 14, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 27, 34, 0, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 36,
	35, 0, 0, 0, 0, 0, 0, 6, 19, 0,
	29, 250, 12, 13, 28, 24, 22, 0, 33, 25,
	17, 16, 23, 11, 31, 15, 14, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 27, 34, 0, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 36,
	35, 0, 0, 0, 0, 0, 0, 6, 19, 0,
	29, 241, 12, 13, 28, 24, 22, 0, 33, 25,
	17, 16, 23, 11, 31, 15, 14, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 27, 34, 0, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 36,
	35, 0, 0, 0, 0, 0, 0, 6, 19, 0,
	29, 237, 12, 13, 28, 24, 22, 0, 33, 25,
	17, 16, 23, 11, 31, 15, 14, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 27, 34, 0, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 36,
	35, 0, 0, 0, 0, 0, 0, 6, 19, 0,
	29, 203, 12, 13, 28, 24, 22, 0, 33, 25,
	17, 16, 23, 11, 31, 15, 14, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 27, 34, 0, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 36,
	35, 0, 0, 0, 0, 0, 0, 6, 19, 0,
	29, 201, 12, 13, 28, 24, 22, 0, 33, 25,
	17, 16, 23, 11, 31, 15, 14, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 27, 34, 0, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 36,
	35, 0, 0, 0, 0, 0, 0, 6, 19, 0,
	29, 190, 12, 13, 28, 24, 22, 0, 33, 25,
	17, 16, 23, 11, 31, 15, 14, 0, 0, 0,
	0, 33, 45, 0, 0, 0, 0, 134, 0, 0,
	0, 32, 27, 34, 0, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 34, 0, 37, 36,
	35, 0, 63, 64, 65, 0, 0, 0, 66, 0,
	29, 37, 36, 35, 28, 0, 6, 19, 58, 0,
	0, 12, 13, 11, 24, 22, 0, 33, 25, 17,
	16, 23, 142, 31, 15, 14, 0, 0, 54, 55,
	56, 57, 59, 62, 0, 0, 60, 61, 0, 0,
	32, 27, 34, 0, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 36, 35,
	0, 0, 0, 0, 0, 0, 6, 19, 0, 29,
	110, 12, 13, 28, 24, 22, 0, 33, 25, 17,
	16, 23, 11, 31, 15, 14, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	32, 27, 34, 0, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 64, 65, 37, 36, 35,
	66, 0, 0, 0, 0, 0, 6, 19, 0, 29,
	58, 12, 13, 28, 24, 22, 5, 33, 25, 17,
	16, 23, 11, 31, 15, 14, 0, 0, 0, 0,
	54, 55, 56, 57, 59, 0, 0, 0, 0, 0,
	32, 27, 34, 0, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 36, 35,
	0, 0, 0, 0, 0, 0, 6, 19, 0, 29,
	0, 12, 13, 28, 24, 22, 0, 33, 25, 17,
	16, 23, 11, 31, 15, 14, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	32, 27, 34, 0, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 64, 65, 37, 36, 35,
	66, 46, 47, 52, 53, 51, 50, 0, 0, 29,
	58, 0, 0, 28, 0, 0, 0, 0, 0, 0,
	0, 0, 11, 0, 0, 0, 0, 0, 48, 49,
	54, 55, 56, 57, 59, 62, 0, 0, 60, 61,
	0, 183, 0, 0, 0, 63, 64, 65, 0, 0,
	182, 66, 46, 47, 52, 53, 51, 50, 63, 64,
	65, 58, 0, 0, 66, 46, 47, 52, 53, 51,
	50, 0, 0, 0, 58, 0, 0, 0, 0, 48,
	49, 54, 55, 56, 57, 59, 62, 0, 238, 60,
	61, 0, 48, 49, 54, 55, 56, 57, 59, 62,
	0, 232, 60, 61, 0, 0, 0, 0, 0, 63,
	64, 65, 0, 0, 213, 66, 46, 47, 52, 53,
	51, 50, 0, 0, 0, 58, 63, 64, 65, 0,
	0, 0, 66, 46, 47, 52, 53, 51, 50, 0,
	0, 0, 58, 48, 49, 54, 55, 56, 57, 59,
	62, 0, 0, 60, 61, 0, 0, 0, 0, 239,
	48, 49, 54, 55, 56, 57, 59, 62, 0, 0,
	60, 61, 63, 64, 65, 0, 231, 0, 66, 46,
	47, 52, 53, 51, 50, 0, 0, 0, 58, 63,
	64, 65, 0, 0, 0, 66, 46, 47, 52, 53,
	51, 50, 0, 0, 0, 58, 48, 49, 54, 55,
	56, 57, 59, 62, 0, 0, 60, 61, 0, 0,
	0, 0, 204, 48, 49, 54, 55, 56, 57, 59,
	62, 0, 0, 60, 61, 63, 64, 65, 0, 181,
	0, 66, 46, 47, 52, 53, 51, 50, 0, 0,
	0, 58, 63, 64, 65, 0, 0, 0, 66, 46,
	47, 52, 53, 51, 50, 0, 0, 0, 58, 48,
	49, 54, 55, 56, 57, 59, 62, 0, 0, 60,
	61, 0, 0, 0, 249, 0, 48, 49, 54, 55,
	56, 57, 59, 62, 0, 0, 60, 61, 63, 64,
	65, 162, 0, 0, 66, 46, 47, 52, 53, 51,
	50, 0, 0, 0, 58, 63, 64, 65, 0, 0,
	0, 66, 46, 47, 52, 53, 51, 50, 0, 0,
	0, 58, 48, 49, 54, 55, 56, 57, 59, 62,
	33, 45, 60, 61, 0, 168, 31, 0, 0, 48,
	49, 54, 55, 56, 57, 59, 62, 0, 0, 60,
	61, 0, 223, 32, 27, 34, 0, 30, 0, 0,
	33, 45, 0, 0, 0, 0, 31, 0, 0, 0,
	37, 36, 35, 0, 0, 0, 251, 0, 0, 0,
	0, 0, 29, 32, 27, 34, 28, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 63, 64, 65,
	37, 36, 35, 66, 46, 47, 52, 53, 51, 50,
	0, 0, 29, 58, 0, 0, 28, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 101, 0, 0, 0,
	0, 48, 49, 54, 55, 56, 57, 59, 62, 240,
	0, 60, 61, 63, 64, 65, 0, 0, 0, 66,
	46, 47, 52, 53, 51, 50, 0, 0, 0, 58,
	63, 64, 65, 0, 0, 0, 66, 46, 47, 52,
	53, 51, 50, 0, 0, 0, 58, 48, 49, 54,
	55, 56, 57, 59, 62, 206, 0, 60, 61, 0,
	0, 0, 0, 0, 48, 49, 54, 55, 56, 57,
	59, 62, 0, 0, 60, 61, 63, 64, 65, 0,
	0, 0, 66, 46, 47, 52, 53, 51, 50, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 0, 0,
	48, 49, 54, 55, 56, 57, 59, 62, 141, 0,
	60, 61, 63, 64, 65, 0, 0, 0, 66, 46,
	47, 52, 53, 51, 50, 0, 0, 0, 58, 63,
	64, 65, 0, 0, 0, 66, 46, 47, 52, 53,
	51, 50, 0, 0, 0, 58, 48, 49, 54, 55,
	56, 57, 59, 62, 0, 0, 60, 61, 0, 0,
	0, 0, 0, 48, 49, 54, 55, 56, 57, 59,
	62, 0, 0, 60, 61, 63, 64, 65, 0, 0,
	0, 66, 46, 47, 52, 53, 51, 50, 63, 64,
	65, 58, 0, 0, 66, 0, 47, 52, 53, 51,
	50, 0, 0, 0, 58, 0, 0, 0, 0, 48,
	49, 54, 55, 56, 57, 59, 62, 0, 0, 60,
	61, 0, 48, 49, 54, 55, 56, 57, 59, 62,
	0, 0, 60, 61, 63, 64, 65, 0, 0, 0,
	66, 0, 0, 52, 53, 51, 50, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 33, 45, 0,
	0, 0, 0, 31, 0, 0, 0, 0, 48, 49,
	54, 55, 56, 57, 59, 62, 0, 0, 60, 61,
	105, 27, 34, 0, 30, 0, 0, 33, 45, 0,
	0, 0, 0, 31, 33, 45, 0, 37, 36, 35,
	31, 0, 0, 0, 0, 0, 0, 0, 88, 29,
	32, 27, 34, 28, 30, 0, 153, 32, 27, 34,
	0, 30, 0, 0, 33, 45, 0, 37, 36, 35,
	31, 33, 45, 0, 37, 36, 35, 31, 0, 29,
	0, 0, 0, 28, 149, 0, 29, 32, 27, 34,
	28, 30, 0, 0, 105, 27, 34, 0, 30, 0,
	0, 33, 45, 0, 37, 36, 35, 31, 0, 0,
	0, 37, 36, 35, 0, 0, 29, 0, 0, 0,
	28, 0, 0, 29, 197, 27, 34, 28, 30, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 36, 35, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 29, 0, 0, 0, 28,
}

var yyPact = [...]int16{
	-1000, 922, -1000, -1000, -1000, 74, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 73, 68, -1000, 1799, 1640, 62,
	22, 234, 1799, -1000, 61, 1769, 53, -1000, 1799, 1799,
	1799, 1799, -1000, 67, -1000, 1799, 1395, 63, 59, 862,
	-1000, 109, -60, 1640, -1000, 99, 1799, 1799, 1799, 1799,
	1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799,
	1799, 1799, 1799, 1799, 1799, 1799, 746, -33, -1000, 1799,
	182, 1799, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1594, 802, 19, 1577, 1799, 1762,
	60, 85, 1732, -1000, -1000, -1000, -1000, -1000, 49, 48,
	1267, -1000, -59, -1000, -62, -18, 1313, -1000, 57, -1000,
	-1000, -1000, 1799, 1653, 1699, 767, 767, 767, 767, 767,
	767, 84, 84, 13, 13, 13, 13, 889, 889, 889,
	131, 131, 131, 53, 182, 1799, 54, -60, -1000, 53,
	1640, -1000, 1799, 1799, 8, 1799, -1000, 1204, 1009, 1799,
	-1000, 1732, -1000, -1000, 6, -62, 1313, 733, -1000, -1,
	-1000, -6, -1000, -69, 1799, -71, 1836, 1799, 1799, 673,
	67, 1640, 53, -60, -1000, 613, 1640, 1187, 105, 1531,
	253, 1799, -1000, 1365, 1073, -1000, -46, -61, 1806, -50,
	-1000, -1000, -53, -1000, -54, -1000, -1000, -23, 1330, 1640,
	1640, -1000, -1000, -1000, 1799, 1799, -1000, 124, -1000, 1799,
	1141, 1060, -1000, -1000, -1000, -55, -1000, -62, 1313, -1000,
	-1000, -1000, 1799, 1799, 553, 1124, 1485, 493, -1000, 982,
	1468, 1799, -1000, -1000, -57, 1640, 1640, -1000, -1000, 1799,
	-1000, -1000, -1000, 1250, -1000, 433, 1422, 373, 253, -1000,
	-1000, -1000, -1000, -1000, 313, -1000,
}

var yyPgo = [...]uint8{
	0, 161, 9, 157, 133, 5, 155, 10, 0, 67,
	1, 4, 8, 154, 153, 142, 6, 141, 140, 2,
	3, 138,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 3, 4, 4, 4,
	4, 4, 4, 13, 13, 13, 13, 13, 14, 14,
	14, 14, 14, 14, 15, 16, 16, 16, 18, 18,
	19, 19, 19, 19, 19, 19, 17, 17, 17, 17,
	17, 17, 5, 5, 5, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 12, 12, 12,
	12, 12, 6, 6, 7, 7, 9, 9, 10, 10,
	10, 10, 20, 20, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21,
}

var yyR2 = [...]int8{
	0, 0, 2, 0, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 2, 4, 3, 3, 5, 4,
	9, 11, 9, 7, 6, 0, 2, 5, 5, 7,
	2, 3, 4, 2, 3, 4, 1, 1, 2, 3,
	1, 2, 1, 4, 3, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 2,
	2, 2, 2, 1, 8, 4, 1, 3, 2, 2,
	4, 4, 6, 5, 5, 4, 3, 1, 3, 3,
	4, 5, 1, 3, 1, 3, 1, 3, 3, 3,
	5, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -3, -18, -4, 14, 4, -17, -13, -14,
	-15, 80, 9, 10, 23, 22, 18, 17, -8, 5,
	-6, -5, 13, 19, 12, 16, -11, 39, 71, 67,
	42, 21, 38, 15, 40, 57, 56, 55, 38, -2,
	38, 38, -9, -8, -5, 16, 32, 33, 59, 60,
	37, 36, 34, 35, 61, 62, 63, 64, 41, 65,
	69, 70, 66, 25, 26, 27, 31, -7, 38, 58,
	75, -21, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, -8, -2, 38, -8, 29, 30,
	68, 73, 29, -8, -8, -8, -8, -19, 29, 57,
	-8, 81, -9, 82, -10, 38, -8, -19, 68, -4,
	8, 22, 75, -8, -8, -8, -8, -8, -8, -8,
	-8, -8, -8, -8, -8, -8, -8, -8, -8, -8,
	-8, -8, -8, -11, 21, 58, 75, -9, -5, -11,
	-8, 4, 20, 58, 75, 24, 7, -8, -8, 72,
	38, 29, -12, 74, -9, -10, -8, -2, 74, -7,
	74, -7, 74, -20, 75, -20, 75, 58, 72, -2,
	38, -8, -11, -9, 38, -2, -8, -8, 38, -8,
	-2, 75, 81, 72, -8, -12, -20, 28, 75, -20,
	8, 74, 28, 74, 28, 81, 82, 38, -8, -8,
	-8, 8, -19, 8, 75, 24, 4, -16, 11, 6,
	-8, -8, 81, 81, 74, -20, 75, -10, -8, 74,
	74, 74, 58, 72, -2, -8, -8, -2, 8, -2,
	-8, 75, 81, 74, -20, -8, -8, 8, 4, 75,
	4, 8, 7, -8, 74, -2, -8, -2, -2, 74,
	8, 4, 8, -16, -2, 8,
}

var yyDef = [...]int8{
	1, -2, 2, 5, 6, 0, 3, 8, 9, 10,
	11, 12, 36, 37, 0, 0, 40, 0, 13, 0,
	0, -2, 0, 3, 0, 0, 45, 46, 0, 0,
	0, 0, 42, 0, 76, 0, 0, 0, 0, 0,
	38, 0, 41, 96, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 14, 94, 0,
	0, 0, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 70, 71, 72, 3, 0, 0,
	0, 78, 102, 79, 102, 42, 0, 3, 0, 4,
	7, 39, 0, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 0, 0, 0, 16, -2, 0,
	17, 3, 0, 0, 0, 0, 3, 0, 0, 0,
	44, 0, 86, 87, 102, 102, 96, 0, 30, 0,
	33, 0, 77, 0, 103, 0, 103, 0, 0, 0,
	0, 97, 68, 15, 95, 0, 19, 0, 0, 0,
	25, 0, 43, 0, 0, 85, 0, 102, 103, 0,
	75, 31, 0, 34, 0, 80, 81, 42, 0, 98,
	99, 28, 3, 18, 0, 0, 3, 0, 3, 0,
	0, 0, 84, 83, 88, 0, 103, 102, 97, 89,
	32, 35, 0, 0, 0, 0, 0, 0, 24, 26,
	0, 0, 82, 90, 0, 100, 101, 29, 3, 0,
	3, 23, 3, 0, 91, 0, 0, 0, 25, 74,
	20, 3, 22, 27, 0, 21,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 67, 3, 65, 69, 3,
	57, 74, 63, 61, 75, 62, 68, 64, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 72, 80,
	60, 58, 59, 73, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 76, 3, 3, 3, 3, 3,
	3, 56, 3, 81, 66, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 70, 82, 71,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 77, 78, 79,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:60
		{
			yyVAL.expr = __chain()
			ss(yylex).Stmts = yyVAL.expr
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:64
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[2].expr)
			ss(yylex).Stmts = yyVAL.expr
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:70
		{
			yyVAL.expr = __chain()
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:70
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[2].expr)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:73
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:74
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:77
		{
			yyVAL.expr = __do(yyDollar[2].expr)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:78
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:79
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:80
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:81
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:82
		{
			yyVAL.expr = emptyNode
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:85
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:88
		{
			yyVAL.expr = __chain()
			for _, v := range yyDollar[2].expr.Nodes() {
				yyVAL.expr = yyVAL.expr.append(__set(v, SNil).At(yyDollar[1].token))
			}
		}
	case 15:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:94
		{
			if len(yyDollar[4].expr.Nodes()) == 1 && len(yyDollar[2].expr.Nodes()) > 1 {
				tmp := randomVarname()
				yyVAL.expr = __chain(__set(tmp, yyDollar[4].expr.Nodes()[0]).At(yyDollar[1].token))
				for i, ident := range yyDollar[2].expr.Nodes() {
					yyVAL.expr = yyVAL.expr.append(__set(ident, __load(tmp, Int(int64(i))).At(yyDollar[1].token)).At(yyDollar[1].token))
				}
			} else {
				yyVAL.expr = __local(yyDollar[2].expr.Nodes(), yyDollar[4].expr.Nodes(), yyDollar[1].token)
			}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:105
		{
			if len(yyDollar[3].expr.Nodes()) == 1 && len(yyDollar[1].expr.Nodes()) > 1 {
				tmp := randomVarname()
				yyVAL.expr = __chain(__set(tmp, yyDollar[3].expr.Nodes()[0]).At(yyDollar[2].token))
				for i, decl := range yyDollar[1].expr.Nodes() {
					x := decl.moveLoadStore(__move, __load(tmp, Int(int64(i))).At(yyDollar[2].token)).At(yyDollar[2].token)
					yyVAL.expr = yyVAL.expr.append(x)
				}
			} else {
				yyVAL.expr = __moveMulti(yyDollar[1].expr.Nodes(), yyDollar[3].expr.Nodes(), yyDollar[2].token)
			}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:117
		{
			yyVAL.expr = yyDollar[1].expr.moveLoadStore(__move, Nodes(yyDollar[2].token2.Node, yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token2.Token)).At(yyDollar[2].token2.Token)
		}
	case 18:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:122
		{
			yyVAL.expr = __loop(emptyNode, __if(yyDollar[2].expr, yyDollar[4].expr, breakNode).At(yyDollar[1].token)).At(yyDollar[1].token)
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:125
		{
			yyVAL.expr = __loop(emptyNode, yyDollar[2].expr, __if(yyDollar[4].expr, breakNode, emptyNode).At(yyDollar[1].token)).At(yyDollar[1].token)
		}
	case 20:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:128
		{
			forVar, forEnd := Sym(yyDollar[2].token), randomVarname()
			cont := __inc(forVar, one).At(yyDollar[1].token)
			yyVAL.expr = __do(
				__set(forVar, yyDollar[4].expr).At(yyDollar[1].token),
				__set(forEnd, yyDollar[6].expr).At(yyDollar[1].token),
				__loop(
					cont,
					__if(
						__less(forVar, forEnd),
						__chain(yyDollar[8].expr, cont),
						breakNode,
					).At(yyDollar[1].token),
				).At(yyDollar[1].token),
			)
		}
	case 21:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:144
		{
			forVar, forEnd, forStep := Sym(yyDollar[2].token), randomVarname(), randomVarname()
			body := __chain(yyDollar[10].expr, __inc(forVar, forStep))
			yyVAL.expr = __do(
				__set(forVar, yyDollar[4].expr).At(yyDollar[1].token),
				__set(forEnd, yyDollar[6].expr).At(yyDollar[1].token),
				__set(forStep, yyDollar[8].expr).At(yyDollar[1].token),
			)
			if yyDollar[8].expr.IsNum() { // step is a static number, easy case
				if yyDollar[8].expr.IsNegativeNumber() {
					yyVAL.expr = yyVAL.expr.append(__loop(__inc(forVar, forStep), __if(__less(forEnd, forVar), body, breakNode).At(yyDollar[1].token)).At(yyDollar[1].token))
				} else {
					yyVAL.expr = yyVAL.expr.append(__loop(__inc(forVar, forStep), __if(__less(forVar, forEnd), body, breakNode).At(yyDollar[1].token)).At(yyDollar[1].token))
				}
			} else {
				yyVAL.expr = yyVAL.expr.append(__loop(
					__inc(forVar, forStep),
					__if(
						__less(zero, forStep).At(yyDollar[1].token),
						__if(__lessEq(forEnd, forVar), breakNode, body).At(yyDollar[1].token), // +step
						__if(__lessEq(forVar, forEnd), breakNode, body).At(yyDollar[1].token), // -step
					).At(yyDollar[1].token),
				).At(yyDollar[1].token))
			}
		}
	case 22:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:169
		{
			yyVAL.expr = __forIn(yyDollar[2].token, yyDollar[4].token, yyDollar[6].expr, yyDollar[8].expr, yyDollar[1].token)
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:170
		{
			yyVAL.expr = __forIn(yyDollar[2].token, yyDollar[1].token, yyDollar[4].expr, yyDollar[6].expr, yyDollar[1].token)
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:173
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).At(yyDollar[1].token)
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:176
		{
			yyVAL.expr = Nodes()
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:176
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:176
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).At(yyDollar[1].token)
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:179
		{
			yyVAL.expr = __func(yyDollar[2].token, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:180
		{
			yyVAL.expr = __store(Sym(yyDollar[2].token), Str(yyDollar[4].token.Str), __func(__markupFuncName(yyDollar[2].token, yyDollar[4].token), yyDollar[5].expr, yyDollar[6].expr))
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:183
		{
			yyVAL.expr = emptyNode
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:184
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:185
		{
			yyVAL.expr = __dotdotdot(yyDollar[2].expr)
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.expr = emptyNode
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:188
		{
			yyVAL.expr = __dotdotdot(yyDollar[2].expr)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.expr = Nodes(SBreak).At(yyDollar[1].token)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.expr = Nodes(SContinue).At(yyDollar[1].token)
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:193
		{
			yyVAL.expr = __goto(Sym(yyDollar[2].token)).At(yyDollar[1].token)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.expr = __label(Sym(yyDollar[2].token))
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:195
		{
			yyVAL.expr = __ret(SNil).At(yyDollar[1].token)
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:196
		{
			if len(yyDollar[2].expr.Nodes()) == 1 {
				__findTailCall(yyDollar[2].expr.Nodes())
				yyVAL.expr = __ret(yyDollar[2].expr.Nodes()[0]).At(yyDollar[1].token)
			} else {
				yyVAL.expr = __ret(Nodes(SArray, yyDollar[2].expr)).At(yyDollar[1].token)
			}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:206
		{
			if ss(yylex).scanner.jsonMode {
				yyVAL.expr = jsonValue(Sym(yyDollar[1].token).simpleJSON(ss(yylex)))
			} else {
				yyVAL.expr = Sym(yyDollar[1].token)
			}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:213
		{
			yyVAL.expr = __load(yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:214
		{
			yyVAL.expr = __load(yyDollar[1].expr, Str(yyDollar[3].token.Str)).At(yyDollar[2].token)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:217
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.expr = Num(yyDollar[1].token.Str)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:219
		{
			yyVAL.expr = Nodes((SOr), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:220
		{
			yyVAL.expr = Nodes((SAnd), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:221
		{
			yyVAL.expr = Nodes((SLess), yyDollar[3].expr, yyDollar[1].expr).At(yyDollar[2].token)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:222
		{
			yyVAL.expr = Nodes((SLess), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:223
		{
			yyVAL.expr = Nodes((SLessEq), yyDollar[3].expr, yyDollar[1].expr).At(yyDollar[2].token)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:224
		{
			yyVAL.expr = Nodes((SLessEq), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:225
		{
			yyVAL.expr = Nodes((SEq), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:226
		{
			yyVAL.expr = Nodes((SNeq), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:227
		{
			yyVAL.expr = Nodes((SAdd), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:228
		{
			yyVAL.expr = Nodes((SSub), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:229
		{
			yyVAL.expr = Nodes((SMul), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:230
		{
			yyVAL.expr = Nodes((SDiv), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:231
		{
			yyVAL.expr = Nodes((SIDiv), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:232
		{
			yyVAL.expr = Nodes((SMod), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:233
		{
			yyVAL.expr = Nodes((SBitAnd), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:234
		{
			yyVAL.expr = Nodes((SBitOr), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:235
		{
			yyVAL.expr = Nodes((SBitXor), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:236
		{
			yyVAL.expr = Nodes((SBitLsh), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:237
		{
			yyVAL.expr = Nodes((SBitRsh), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:238
		{
			yyVAL.expr = Nodes((SBitURsh), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:239
		{
			yyVAL.expr = Nodes(SIs, yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:240
		{
			yyVAL.expr = Nodes(SNot, Nodes(SIs, yyDollar[1].expr, yyDollar[4].expr).At(yyDollar[2].token)).At(yyDollar[2].token)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:241
		{
			yyVAL.expr = Nodes((SBitNot), yyDollar[2].expr).At(yyDollar[1].token)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:242
		{
			yyVAL.expr = Nodes((SLen), yyDollar[2].expr).At(yyDollar[1].token)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:243
		{
			yyVAL.expr = Nodes(SSub, zero, yyDollar[2].expr).At(yyDollar[1].token)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:244
		{
			yyVAL.expr = Nodes((SNot), yyDollar[2].expr).At(yyDollar[1].token)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:247
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 74:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:248
		{
			yyVAL.expr = __if(yyDollar[3].expr, __move(Sa, yyDollar[5].expr).At(yyDollar[1].token), __move(Sa, yyDollar[7].expr).At(yyDollar[1].token)).At(yyDollar[1].token)
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:249
		{
			yyVAL.expr = __lambda(__markupLambdaName(yyDollar[1].token), yyDollar[2].expr, yyDollar[3].expr)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:250
		{
			yyVAL.expr = Str(yyDollar[1].token.Str)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:251
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:252
		{
			yyVAL.expr = ss(yylex).__array(yyDollar[1].token, emptyNode)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:253
		{
			yyVAL.expr = ss(yylex).__object(yyDollar[1].token, emptyNode)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:254
		{
			yyVAL.expr = ss(yylex).__array(yyDollar[1].token, yyDollar[2].expr)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:255
		{
			yyVAL.expr = ss(yylex).__object(yyDollar[1].token, yyDollar[2].expr)
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:256
		{
			yyVAL.expr = Nodes(SSlice, yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr).At(yyDollar[2].token)
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:257
		{
			yyVAL.expr = Nodes(SSlice, yyDollar[1].expr, zero, yyDollar[4].expr).At(yyDollar[2].token)
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:258
		{
			yyVAL.expr = Nodes(SSlice, yyDollar[1].expr, yyDollar[3].expr, Int(-1)).At(yyDollar[2].token)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:259
		{
			yyVAL.expr = __tryCall(yyDollar[1].expr, yyDollar[4].expr.At(yyDollar[3].token)).At(yyDollar[3].token)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:260
		{
			yyVAL.expr = __call(yyDollar[1].expr, yyDollar[3].expr.At(yyDollar[2].token)).At(yyDollar[2].token)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:263
		{
			yyVAL.expr = emptyNode
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:264
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:265
		{
			yyVAL.expr = Nodes(Nodes(SObject, yyDollar[1].expr).At(yyDollar[3].token))
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.expr = __dotdotdot(yyDollar[1].expr)
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:267
		{
			yyVAL.expr = yyDollar[1].expr.append(Nodes(SObject, yyDollar[3].expr).At(yyDollar[2].token))
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:270
		{
			yyVAL.expr = Nodes(yyDollar[1].expr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:270
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[3].expr)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:273
		{
			yyVAL.expr = Nodes(Sym(yyDollar[1].token))
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:273
		{
			yyVAL.expr = yyDollar[1].expr.append(Sym(yyDollar[3].token))
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:276
		{
			yyVAL.expr = ss(yylex).__arrayBuild(Node{}, yyDollar[1].expr)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:276
		{
			yyVAL.expr = ss(yylex).__arrayBuild(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:279
		{
			yyVAL.expr = ss(yylex).__objectBuild(Node{}, Str(yyDollar[1].token.Str), yyDollar[3].expr)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:280
		{
			yyVAL.expr = ss(yylex).__objectBuild(Node{}, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:281
		{
			yyVAL.expr = ss(yylex).__objectBuild(yyDollar[1].expr, Str(yyDollar[3].token.Str), yyDollar[5].expr)
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:282
		{
			yyVAL.expr = ss(yylex).__objectBuild(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:284
		{
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:284
		{
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:287
		{
			yyVAL.token2 = &TokenNode{yyDollar[1].token, SAdd}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:288
		{
			yyVAL.token2 = &TokenNode{yyDollar[1].token, SSub}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:289
		{
			yyVAL.token2 = &TokenNode{yyDollar[1].token, SMul}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:290
		{
			yyVAL.token2 = &TokenNode{yyDollar[1].token, SDiv}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:291
		{
			yyVAL.token2 = &TokenNode{yyDollar[1].token, SIDiv}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:292
		{
			yyVAL.token2 = &TokenNode{yyDollar[1].token, SMod}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:293
		{
			yyVAL.token2 = &TokenNode{yyDollar[1].token, SBitAnd}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:294
		{
			yyVAL.token2 = &TokenNode{yyDollar[1].token, SBitOr}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:295
		{
			yyVAL.token2 = &TokenNode{yyDollar[1].token, SBitXor}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:296
		{
			yyVAL.token2 = &TokenNode{yyDollar[1].token, SBitLsh}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:297
		{
			yyVAL.token2 = &TokenNode{yyDollar[1].token, SBitRsh}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:298
		{
			yyVAL.token2 = &TokenNode{yyDollar[1].token, SBitURsh}
		}
	}
	goto yystack /* stack new state and value */
}
