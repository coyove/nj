// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

//line parser.go.y:26
type yySymType struct {
	yys   int
	token Token
	expr  Node
}

const TDo = 57346
const TLocal = 57347
const TElseIf = 57348
const TThen = 57349
const TEnd = 57350
const TBreak = 57351
const TElse = 57352
const TFor = 57353
const TWhile = 57354
const TFunc = 57355
const TIf = 57356
const TReturn = 57357
const TReturnVoid = 57358
const TRepeat = 57359
const TUntil = 57360
const TNot = 57361
const TLabel = 57362
const TGoto = 57363
const TIn = 57364
const TNext = 57365
const TLsh = 57366
const TRsh = 57367
const TURsh = 57368
const TDotDotDot = 57369
const TLParen = 57370
const TOr = 57371
const TAnd = 57372
const TEqeq = 57373
const TNeq = 57374
const TLte = 57375
const TGte = 57376
const TIdent = 57377
const TNumber = 57378
const TString = 57379
const TIDiv = 57380
const ASSIGN = 57381
const FUNC = 57382
const UNARY = 57383

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TDo",
	"TLocal",
	"TElseIf",
	"TThen",
	"TEnd",
	"TBreak",
	"TElse",
	"TFor",
	"TWhile",
	"TFunc",
	"TIf",
	"TReturn",
	"TReturnVoid",
	"TRepeat",
	"TUntil",
	"TNot",
	"TLabel",
	"TGoto",
	"TIn",
	"TNext",
	"TLsh",
	"TRsh",
	"TURsh",
	"TDotDotDot",
	"TLParen",
	"TOr",
	"TAnd",
	"TEqeq",
	"TNeq",
	"TLte",
	"TGte",
	"TIdent",
	"TNumber",
	"TString",
	"'{'",
	"'['",
	"'('",
	"'='",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'#'",
	"'.'",
	"'&'",
	"'|'",
	"'~'",
	"'@'",
	"TIDiv",
	"'T'",
	"ASSIGN",
	"FUNC",
	"UNARY",
	"';'",
	"','",
	"')'",
	"']'",
	"'}'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:351

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	41, 46,
	62, 46,
	-2, 81,
	-1, 101,
	41, 47,
	62, 47,
	-2, 81,
}

const yyPrivate = 57344

const yyLast = 1241

var yyAct = [...]int{
	31, 32, 159, 16, 103, 176, 136, 30, 158, 46,
	201, 211, 169, 149, 186, 111, 185, 182, 164, 64,
	166, 51, 144, 98, 54, 55, 139, 137, 48, 16,
	207, 181, 179, 140, 109, 47, 154, 90, 91, 92,
	93, 147, 94, 86, 99, 99, 200, 99, 168, 49,
	105, 102, 150, 97, 16, 110, 100, 137, 146, 26,
	95, 40, 106, 25, 24, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 75, 76, 78, 25,
	141, 53, 45, 50, 138, 105, 77, 27, 160, 174,
	29, 43, 161, 41, 143, 28, 145, 106, 63, 152,
	153, 101, 155, 148, 25, 42, 16, 191, 104, 52,
	6, 15, 73, 74, 75, 76, 78, 59, 58, 4,
	3, 14, 61, 17, 77, 44, 225, 9, 115, 22,
	20, 162, 23, 13, 12, 21, 87, 18, 11, 10,
	60, 165, 5, 16, 170, 171, 56, 2, 16, 114,
	1, 0, 180, 26, 0, 0, 0, 0, 24, 16,
	0, 0, 0, 0, 188, 189, 25, 0, 0, 193,
	194, 187, 196, 0, 0, 0, 16, 0, 0, 62,
	0, 0, 16, 0, 16, 0, 0, 0, 0, 0,
	16, 16, 0, 0, 213, 151, 0, 0, 216, 0,
	156, 0, 16, 25, 16, 0, 16, 16, 25, 0,
	16, 222, 0, 0, 0, 0, 16, 0, 0, 25,
	0, 61, 17, 178, 0, 0, 9, 177, 22, 20,
	0, 23, 13, 12, 21, 167, 25, 11, 10, 0,
	0, 0, 25, 0, 25, 0, 0, 0, 0, 0,
	25, 25, 26, 0, 0, 0, 184, 24, 0, 82,
	83, 84, 25, 190, 25, 192, 25, 25, 0, 0,
	25, 0, 0, 198, 199, 0, 25, 0, 62, 73,
	74, 75, 76, 78, 0, 0, 0, 0, 210, 0,
	212, 77, 214, 0, 215, 82, 83, 84, 0, 218,
	65, 66, 71, 72, 70, 69, 0, 0, 224, 0,
	0, 0, 0, 67, 68, 73, 74, 75, 76, 78,
	81, 0, 0, 79, 80, 0, 0, 77, 0, 0,
	0, 82, 83, 84, 0, 195, 65, 66, 71, 72,
	70, 69, 0, 0, 0, 0, 0, 0, 0, 67,
	68, 73, 74, 75, 76, 78, 81, 0, 0, 79,
	80, 0, 0, 77, 0, 0, 0, 82, 83, 84,
	0, 163, 65, 66, 71, 72, 70, 69, 0, 0,
	0, 0, 0, 202, 0, 67, 68, 73, 74, 75,
	76, 78, 81, 0, 0, 79, 80, 0, 0, 77,
	0, 0, 0, 82, 83, 84, 0, 142, 65, 66,
	71, 72, 70, 69, 0, 0, 0, 0, 0, 0,
	0, 67, 68, 73, 74, 75, 76, 78, 81, 0,
	0, 79, 80, 0, 0, 77, 0, 82, 83, 84,
	0, 203, 65, 66, 71, 72, 70, 69, 0, 0,
	0, 0, 0, 0, 0, 67, 68, 73, 74, 75,
	76, 78, 81, 0, 0, 79, 80, 0, 0, 77,
	0, 0, 82, 83, 84, 0, 113, 65, 66, 71,
	72, 70, 69, 0, 0, 0, 220, 0, 0, 0,
	67, 68, 73, 74, 75, 76, 78, 81, 0, 0,
	79, 80, 0, 0, 77, 0, 82, 83, 84, 0,
	173, 65, 66, 71, 72, 70, 69, 0, 0, 0,
	0, 0, 206, 0, 67, 68, 73, 74, 75, 76,
	78, 81, 0, 0, 79, 80, 0, 0, 77, 82,
	83, 84, 0, 0, 65, 66, 71, 72, 70, 69,
	0, 0, 204, 0, 0, 0, 0, 67, 68, 73,
	74, 75, 76, 78, 81, 0, 0, 79, 80, 0,
	0, 77, 82, 83, 84, 0, 0, 65, 66, 71,
	72, 70, 69, 0, 0, 175, 0, 0, 0, 0,
	67, 68, 73, 74, 75, 76, 78, 81, 0, 0,
	79, 80, 0, 0, 77, 82, 83, 84, 0, 0,
	65, 66, 71, 72, 70, 69, 0, 0, 0, 0,
	0, 112, 0, 67, 68, 73, 74, 75, 76, 78,
	81, 0, 0, 79, 80, 0, 0, 77, 82, 83,
	84, 0, 0, 65, 66, 71, 72, 70, 69, 0,
	0, 107, 0, 0, 0, 0, 67, 68, 73, 74,
	75, 76, 78, 81, 0, 0, 79, 80, 0, 0,
	77, 82, 83, 84, 0, 0, 65, 66, 71, 72,
	70, 69, 0, 0, 0, 0, 0, 0, 0, 67,
	68, 73, 74, 75, 76, 78, 81, 61, 17, 79,
	80, 223, 9, 77, 22, 20, 0, 23, 13, 12,
	21, 0, 0, 11, 10, 0, 82, 83, 84, 0,
	0, 65, 66, 71, 72, 70, 69, 0, 26, 0,
	0, 0, 0, 24, 67, 68, 73, 74, 75, 76,
	78, 81, 0, 0, 79, 80, 0, 0, 77, 0,
	0, 61, 17, 0, 62, 221, 9, 0, 22, 20,
	0, 23, 13, 12, 21, 0, 0, 11, 10, 0,
	0, 0, 0, 61, 17, 0, 0, 219, 9, 0,
	22, 20, 26, 23, 13, 12, 21, 24, 0, 11,
	10, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 26, 0, 61, 17, 62, 24,
	217, 9, 0, 22, 20, 0, 23, 13, 12, 21,
	0, 0, 11, 10, 0, 0, 0, 0, 61, 17,
	62, 0, 209, 9, 0, 22, 20, 26, 23, 13,
	12, 21, 24, 0, 11, 10, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 26,
	0, 61, 17, 62, 24, 208, 9, 0, 22, 20,
	0, 23, 13, 12, 21, 0, 0, 11, 10, 0,
	0, 0, 0, 61, 17, 62, 0, 205, 9, 0,
	22, 20, 26, 23, 13, 12, 21, 24, 0, 11,
	10, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 26, 0, 61, 17, 62, 24,
	197, 9, 0, 22, 20, 0, 23, 13, 12, 21,
	0, 0, 11, 10, 0, 0, 0, 0, 61, 17,
	62, 0, 183, 9, 0, 22, 20, 26, 23, 13,
	12, 21, 24, 0, 11, 10, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 26,
	0, 61, 17, 62, 24, 172, 9, 0, 22, 20,
	0, 23, 13, 12, 21, 0, 0, 11, 10, 0,
	0, 0, 0, 61, 17, 62, 37, 157, 9, 0,
	22, 20, 26, 23, 13, 12, 21, 24, 0, 11,
	10, 0, 26, 33, 34, 35, 0, 24, 0, 0,
	0, 39, 38, 0, 26, 61, 17, 37, 62, 24,
	9, 36, 22, 20, 0, 23, 13, 12, 21, 108,
	96, 11, 10, 88, 33, 34, 35, 89, 24, 0,
	62, 0, 39, 38, 0, 0, 26, 0, 0, 61,
	17, 24, 36, 57, 9, 0, 22, 20, 0, 23,
	13, 12, 21, 85, 0, 11, 10, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	26, 7, 17, 0, 0, 24, 9, 0, 22, 20,
	19, 23, 13, 12, 21, 0, 0, 11, 10, 0,
	0, 0, 0, 61, 17, 0, 62, 0, 9, 0,
	22, 20, 26, 23, 13, 12, 21, 24, 0, 11,
	10, 0, 82, 83, 84, 0, 0, 0, 66, 71,
	72, 70, 69, 0, 26, 0, 0, 0, 8, 24,
	67, 68, 73, 74, 75, 76, 78, 81, 0, 0,
	79, 80, 0, 0, 77, 82, 83, 84, 0, 0,
	62, 0, 71, 72, 70, 69, 0, 0, 82, 83,
	84, 0, 0, 67, 68, 73, 74, 75, 76, 78,
	81, 0, 0, 79, 80, 37, 0, 77, 73, 74,
	75, 76, 78, 81, 0, 0, 79, 80, 0, 0,
	77, 26, 33, 34, 35, 0, 24, 0, 0, 0,
	39, 38, 0, 0, 0, 0, 0, 0, 0, 0,
	36,
}

var yyPact = [...]int{
	-1000, 1097, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	70, 65, -1000, 1186, -1000, -1000, 64, 0, -13, 58,
	1186, -1000, 56, 1186, 1186, -1000, -1000, 1065, -1000, 88,
	-43, 702, 64, -1000, -1000, 1018, 1186, 1186, 1186, 1186,
	-1000, 1186, 25, -1000, -1000, 987, -18, -1000, 1186, 24,
	67, 657, 1031, -7, 624, 423, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1186, 1186, 1186, 1186, 1186, 1186,
	1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
	1186, 1186, 1186, 1186, 1186, -1000, -35, -36, -8, 1186,
	-1000, -1000, -1000, -1000, 353, -1000, -1000, -5, 1186, 23,
	-43, -1000, 64, -22, 17, -1000, -1000, -1000, 1186, 1186,
	1, 1186, -1000, -1000, 999, 702, 1118, 1151, 1164, 1164,
	1164, 1164, 1164, 1164, 40, 40, -1000, -1000, -1000, -1000,
	245, 245, 245, 78, 78, 78, -57, 1186, -63, 63,
	1186, 317, -1000, -45, -42, -43, -1000, -1000, -15, 22,
	22, 977, 702, 458, 77, 591, 227, -1000, -1000, -1000,
	-9, 1186, 702, -10, -1000, -46, -1000, 944, -1000, -47,
	-49, 0, -1000, 1186, 1186, -1000, 109, -1000, 1186, 1186,
	281, 1186, -1000, -1000, 922, -1000, -1000, -17, 389, 558,
	889, -1000, 1119, 525, 702, -11, 702, -1000, 867, 834,
	-1000, -52, -1000, 1186, -1000, -1000, -1000, 1186, -1000, -1000,
	812, -1000, 779, 492, 757, 227, 702, -1000, 703, -1000,
	-1000, -1000, -1000, -1000, 128, -1000,
}

var yyPgo = [...]int{
	0, 160, 97, 157, 156, 61, 147, 9, 0, 7,
	146, 1, 135, 150, 131, 121, 5, 128, 127, 120,
	6, 4,
}

var yyR1 = [...]int{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 18, 18, 13, 13,
	13, 13, 14, 14, 14, 14, 14, 14, 15, 16,
	16, 16, 19, 19, 19, 19, 19, 19, 17, 17,
	17, 17, 17, 5, 5, 5, 6, 6, 7, 7,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	11, 11, 11, 11, 12, 12, 12, 9, 9, 10,
	10, 10, 10, 20, 20, 21, 21,
}

var yyR2 = [...]int{
	0, 0, 2, 0, 2, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 3, 1, 1, 1, 1, 2,
	4, 3, 5, 4, 9, 11, 9, 7, 6, 0,
	2, 5, 6, 7, 8, 8, 9, 10, 1, 2,
	3, 1, 2, 1, 4, 3, 1, 3, 1, 3,
	1, 1, 1, 2, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	3, 1, 2, 2, 2, 4, 5, 1, 3, 3,
	5, 5, 7, 0, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -1, -3, -17, -18, -13, -19, 4, 61, 9,
	21, 20, 16, 15, -14, -15, -11, 5, -6, 13,
	12, 17, 11, 14, 40, -5, 35, -2, 35, 35,
	-9, -8, -11, 36, 37, 38, 54, 19, 45, 44,
	-5, 39, 51, 37, -12, 28, -7, 35, 41, 62,
	35, -8, -2, 35, -8, -8, -4, 8, -17, -18,
	-13, 4, 61, 20, 62, 29, 30, 42, 43, 34,
	33, 31, 32, 44, 45, 46, 47, 56, 48, 52,
	53, 49, 24, 25, 26, 65, -9, -10, 35, 39,
	-8, -8, -8, -8, -8, 35, 63, -9, 41, 62,
	-9, -5, -11, -21, 51, 28, 40, 4, 18, 41,
	62, 22, 7, 63, -2, -8, -8, -8, -8, -8,
	-8, -8, -8, -8, -8, -8, -8, -8, -8, -8,
	-8, -8, -8, -8, -8, -8, -20, 62, -20, 62,
	41, -8, 64, -20, 27, -9, 35, 63, -7, 35,
	35, -2, -8, -8, 35, -8, -2, 8, 65, 65,
	35, 39, -8, 64, 63, -20, 62, -2, 63, 27,
	-21, -21, 8, 62, 22, 4, -16, 10, 6, 41,
	-8, 41, 63, 8, -2, 63, 63, -7, -8, -8,
	-2, 8, -2, -8, -8, 64, -8, 8, -2, -2,
	63, 27, 4, 62, 4, 8, 7, 41, 8, 8,
	-2, 63, -2, -8, -2, -2, -8, 8, -2, 8,
	4, 8, -16, 8, -2, 8,
}

var yyDef = [...]int{
	1, -2, 2, 5, 6, 7, 8, 3, 10, 38,
	0, 0, 41, 0, 16, 17, 18, 0, 0, 0,
	0, 3, 0, 0, 0, -2, 43, 0, 39, 0,
	42, 87, 50, 51, 52, 0, 0, 0, 0, 0,
	81, 0, 0, 82, 83, 0, 19, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 4, 9, 11, 12,
	13, 3, 15, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 93, 93, 43, 0,
	76, 77, 78, 79, 0, 45, 84, 93, 0, 0,
	21, -2, 0, 0, 0, 95, 96, 3, 0, 0,
	0, 0, 3, 80, 0, 88, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 0, 94, 0, 94,
	0, 0, 44, 0, 93, 20, 49, 3, 0, 48,
	0, 0, 23, 0, 0, 0, 29, 14, 54, 55,
	0, 0, 89, 0, 85, 0, 94, 0, 3, 0,
	0, 0, 22, 0, 0, 3, 0, 3, 0, 0,
	0, 0, 86, 32, 0, 3, 3, 0, 0, 0,
	0, 28, 30, 0, 91, 0, 90, 33, 0, 0,
	3, 0, 3, 0, 3, 27, 3, 0, 34, 35,
	0, 3, 0, 0, 0, 29, 92, 36, 0, 24,
	3, 26, 31, 37, 0, 25,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 50, 3, 48, 52, 3,
	40, 63, 46, 44, 62, 45, 51, 47, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 61,
	43, 41, 42, 3, 55, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 57, 3, 3, 3, 3, 3,
	3, 39, 3, 64, 49, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 38, 53, 65, 54,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 56, 58, 59, 60,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:55
		{
			yyVAL.expr = __chain()
			yylex.(*Lexer).Stmts = yyVAL.expr
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:59
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[2].expr)
			yylex.(*Lexer).Stmts = yyVAL.expr
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:65
		{
			yyVAL.expr = __chain()
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:68
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[2].expr)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:73
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:74
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:75
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:76
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:77
		{
			yyVAL.expr = __do(yyDollar[2].expr)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:78
		{
			yyVAL.expr = emptyNode
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:81
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:82
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:83
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:84
		{
			yyVAL.expr = __do(yyDollar[2].expr)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:85
		{
			yyVAL.expr = emptyNode
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:88
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:89
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:92
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:95
		{
			yyVAL.expr = __chain()
			for _, v := range yyDollar[2].expr.Nodes {
				yyVAL.expr = yyVAL.expr.append(__set(v, NewSymbol(ANil)).SetPos(yyDollar[1].token.Pos))
			}
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:101
		{
			if len(yyDollar[4].expr.Nodes) == 1 && len(yyDollar[2].expr.Nodes) > 1 {
				tmp := randomVarname()
				yyVAL.expr = __chain(__local([]Node{tmp}, yyDollar[4].expr.Nodes, yyDollar[1].token.Pos))
				for i, ident := range yyDollar[2].expr.Nodes {
					yyVAL.expr = yyVAL.expr.append(__local([]Node{ident}, []Node{__load(tmp, NewNumberFromInt(int64(i))).SetPos(yyDollar[1].token.Pos)}, yyDollar[1].token.Pos))
				}
			} else {
				yyVAL.expr = __local(yyDollar[2].expr.Nodes, yyDollar[4].expr.Nodes, yyDollar[1].token.Pos)
			}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:112
		{
			if len(yyDollar[3].expr.Nodes) == 1 && len(yyDollar[1].expr.Nodes) > 1 {
				tmp := randomVarname()
				yyVAL.expr = __chain(__local([]Node{tmp}, yyDollar[3].expr.Nodes, yyDollar[2].token.Pos))
				for i, decl := range yyDollar[1].expr.Nodes {
					x := decl.moveLoadStore(__move, __load(tmp, NewNumberFromInt(int64(i))).SetPos(yyDollar[2].token.Pos)).SetPos(yyDollar[2].token.Pos)
					yyVAL.expr = yyVAL.expr.append(x)
				}
			} else {
				yyVAL.expr = __moveMulti(yyDollar[1].expr.Nodes, yyDollar[3].expr.Nodes, yyDollar[2].token.Pos)
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:126
		{
			yyVAL.expr = __loop(__if(yyDollar[2].expr, yyDollar[4].expr, breakNode).SetPos(yyDollar[1].token.Pos)).SetPos(yyDollar[1].token.Pos)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:129
		{
			yyVAL.expr = __loop(
				__chain(
					yyDollar[2].expr,
					__if(yyDollar[4].expr, breakNode, emptyNode).SetPos(yyDollar[1].token.Pos),
				).SetPos(yyDollar[1].token.Pos),
			).SetPos(yyDollar[1].token.Pos)
		}
	case 24:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:137
		{
			forVar, forEnd := NewSymbolFromToken(yyDollar[2].token), randomVarname()
			yyVAL.expr = __do(
				__set(forVar, yyDollar[4].expr).SetPos(yyDollar[1].token.Pos),
				__set(forEnd, yyDollar[6].expr).SetPos(yyDollar[1].token.Pos),
				__loop(
					__if(
						__less(forVar, forEnd),
						__chain(yyDollar[8].expr, __inc(forVar, oneNode).SetPos(yyDollar[1].token.Pos)),
						breakNode,
					).SetPos(yyDollar[1].token.Pos),
				).SetPos(yyDollar[1].token.Pos),
			)
		}
	case 25:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:151
		{
			forVar, forEnd, forStep := NewSymbolFromToken(yyDollar[2].token), randomVarname(), randomVarname()
			body := __chain(yyDollar[10].expr, __inc(forVar, forStep))
			yyVAL.expr = __do(
				__set(forVar, yyDollar[4].expr).SetPos(yyDollar[1].token.Pos),
				__set(forEnd, yyDollar[6].expr).SetPos(yyDollar[1].token.Pos),
				__set(forStep, yyDollar[8].expr).SetPos(yyDollar[1].token.Pos))

			if yyDollar[8].expr.IsNumber() { // step is a static number, easy case
				if yyDollar[8].expr.IsNegativeNumber() {
					yyVAL.expr = yyVAL.expr.append(__loop(__if(__less(forEnd, forVar), body, breakNode).SetPos(yyDollar[1].token.Pos)).SetPos(yyDollar[1].token.Pos))
				} else {
					yyVAL.expr = yyVAL.expr.append(__loop(__if(__less(forVar, forEnd), body, breakNode).SetPos(yyDollar[1].token.Pos)).SetPos(yyDollar[1].token.Pos))
				}
			} else {
				yyVAL.expr = yyVAL.expr.append(__loop(
					__if(
						__less(zeroNode, forStep).SetPos(yyDollar[1].token.Pos),
						// +step
						__if(__lessEq(forEnd, forVar), breakNode, body).SetPos(yyDollar[1].token.Pos),
						// -step
						__if(__lessEq(forVar, forEnd), breakNode, body).SetPos(yyDollar[1].token.Pos),
					).SetPos(yyDollar[1].token.Pos),
				).SetPos(yyDollar[1].token.Pos))
			}
		}
	case 26:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:177
		{
			yyVAL.expr = __forIn(yyDollar[2].token, yyDollar[4].token, yyDollar[6].expr, yyDollar[8].expr, yyDollar[1].token.Pos)
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:180
		{
			yyVAL.expr = __forIn(yyDollar[2].token, yyDollar[1].token, yyDollar[4].expr, yyDollar[6].expr, yyDollar[1].token.Pos)
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.expr = NewComplex()
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.expr = __func(yyDollar[2].token, emptyNode, "", yyDollar[5].expr)
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:203
		{
			yyVAL.expr = __func(yyDollar[2].token, yyDollar[4].expr, "", yyDollar[6].expr)
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:204
		{
			yyVAL.expr = __func(yyDollar[2].token, __dotdotdot(yyDollar[4].expr), "", yyDollar[7].expr)
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:205
		{
			yyVAL.expr = __store(NewSymbolFromToken(yyDollar[2].token), NewString(yyDollar[4].token.Str), __func(__markupFuncName(yyDollar[2].token, yyDollar[4].token), emptyNode, "", yyDollar[7].expr))
		}
	case 36:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:208
		{
			yyVAL.expr = __store(NewSymbolFromToken(yyDollar[2].token), NewString(yyDollar[4].token.Str), __func(__markupFuncName(yyDollar[2].token, yyDollar[4].token), yyDollar[6].expr, "", yyDollar[8].expr))
		}
	case 37:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:211
		{
			yyVAL.expr = __store(NewSymbolFromToken(yyDollar[2].token), NewString(yyDollar[4].token.Str), __func(__markupFuncName(yyDollar[2].token, yyDollar[4].token), __dotdotdot(yyDollar[6].expr), "", yyDollar[9].expr))
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:216
		{
			yyVAL.expr = NewComplex(NewSymbol(ABreak)).SetPos(yyDollar[1].token.Pos)
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:219
		{
			yyVAL.expr = NewComplex(NewSymbol(AGoto), NewSymbolFromToken(yyDollar[2].token)).SetPos(yyDollar[1].token.Pos)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:222
		{
			yyVAL.expr = NewComplex(NewSymbol(ALabel), NewSymbolFromToken(yyDollar[2].token))
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:225
		{
			yyVAL.expr = NewComplex(NewSymbol(AReturn), NewSymbol(ANil)).SetPos(yyDollar[1].token.Pos)
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:228
		{
			if len(yyDollar[2].expr.Nodes) == 1 {
				a := yyDollar[2].expr.Nodes[0]
				if len(a.Nodes) == 3 && a.Nodes[0].SymbolValue() == ACall {
					// return call(...) -> return tailcall(...)
					a.Nodes[0].strSym = ATailCall
				}
				yyVAL.expr = NewComplex(NewSymbol(AReturn), a).SetPos(yyDollar[1].token.Pos)
			} else {
				yyVAL.expr = NewComplex(NewSymbol(AReturn), NewComplex(NewSymbol(AArray), yyDollar[2].expr)).SetPos(yyDollar[1].token.Pos)
			}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:242
		{
			yyVAL.expr = NewSymbolFromToken(yyDollar[1].token)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.expr = __load(yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:248
		{
			yyVAL.expr = __load(yyDollar[1].expr, NewString(yyDollar[3].token.Str)).SetPos(yyDollar[2].token.Pos)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:253
		{
			yyVAL.expr = NewComplex(yyDollar[1].expr)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:256
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[3].expr)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:261
		{
			yyVAL.expr = NewComplex(NewSymbolFromToken(yyDollar[1].token))
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:264
		{
			yyVAL.expr = yyDollar[1].expr.append(NewSymbolFromToken(yyDollar[3].token))
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:269
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:270
		{
			yyVAL.expr = NewNumberFromString(yyDollar[1].token.Str)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:271
		{
			yyVAL.expr = NewString(yyDollar[1].token.Str)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:272
		{
			yyVAL.expr = NewComplex(NewSymbol(AArrayMap), emptyNode).SetPos(yyDollar[1].token.Pos)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:273
		{
			yyVAL.expr = NewComplex(NewSymbol(AArray), yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:274
		{
			yyVAL.expr = NewComplex(NewSymbol(AArrayMap), yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:275
		{
			yyVAL.expr = NewComplex(NewSymbol(AOr), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:276
		{
			yyVAL.expr = NewComplex(NewSymbol(AAnd), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:277
		{
			yyVAL.expr = NewComplex(NewSymbol(ALess), yyDollar[3].expr, yyDollar[1].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:278
		{
			yyVAL.expr = NewComplex(NewSymbol(ALess), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:279
		{
			yyVAL.expr = NewComplex(NewSymbol(ALessEq), yyDollar[3].expr, yyDollar[1].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:280
		{
			yyVAL.expr = NewComplex(NewSymbol(ALessEq), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:281
		{
			yyVAL.expr = NewComplex(NewSymbol(AEq), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:282
		{
			yyVAL.expr = NewComplex(NewSymbol(ANeq), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:283
		{
			yyVAL.expr = NewComplex(NewSymbol(AAdd), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:284
		{
			yyVAL.expr = NewComplex(NewSymbol(ASub), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:285
		{
			yyVAL.expr = NewComplex(NewSymbol(AMul), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:286
		{
			yyVAL.expr = NewComplex(NewSymbol(ADiv), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:287
		{
			yyVAL.expr = NewComplex(NewSymbol(AIDiv), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:288
		{
			yyVAL.expr = NewComplex(NewSymbol(AMod), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:289
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitAnd), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:290
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitOr), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:291
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitXor), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:292
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitLsh), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:293
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitRsh), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:294
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitURsh), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:295
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitNot), yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:296
		{
			yyVAL.expr = NewComplex(NewSymbol(ANot), yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:297
		{
			yyVAL.expr = NewComplex(NewSymbol(ASub), zeroNode, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:298
		{
			yyVAL.expr = NewComplex(NewSymbol(AAdd), zeroNode, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:301
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:302
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:305
		{
			yyVAL.expr = __call(yyDollar[1].expr, NewComplex(NewString(yyDollar[2].token.Str))).SetPos(yyDollar[1].expr.Pos())
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:308
		{
			yyDollar[2].expr.Nodes[1] = yyDollar[1].expr
			yyVAL.expr = yyDollar[2].expr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:314
		{
			yyVAL.expr = __call(emptyNode, emptyNode).SetPos(yyDollar[1].token.Pos)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:317
		{
			yyVAL.expr = __call(emptyNode, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:320
		{
			yyVAL.expr = __call(emptyNode, __dotdotdot(yyDollar[2].expr)).SetPos(yyDollar[1].token.Pos)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:325
		{
			yyVAL.expr = NewComplex(yyDollar[1].expr)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:328
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[3].expr)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:333
		{
			yyVAL.expr = NewComplex(NewString(yyDollar[1].token.Str), yyDollar[3].expr)
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:336
		{
			yyVAL.expr = NewComplex(yyDollar[2].expr, yyDollar[5].expr)
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.expr = yyDollar[1].expr.append(NewString(yyDollar[3].token.Str)).append(yyDollar[5].expr)
		}
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:342
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[4].expr).append(yyDollar[7].expr)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:346
		{
			yyVAL.expr = emptyNode
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:346
		{
			yyVAL.expr = emptyNode
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:348
		{
			yyVAL.token = yyDollar[1].token
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:349
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
