// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

//line parser.go.y:24
type yySymType struct {
	yys   int
	token Token
	expr  Node
}

const TDo = 57346
const TLocal = 57347
const TElseIf = 57348
const TThen = 57349
const TEnd = 57350
const TBreak = 57351
const TContinue = 57352
const TElse = 57353
const TFor = 57354
const TWhile = 57355
const TFunc = 57356
const TLambda = 57357
const TIf = 57358
const TReturn = 57359
const TReturnVoid = 57360
const TRepeat = 57361
const TUntil = 57362
const TNot = 57363
const TLabel = 57364
const TGoto = 57365
const TIn = 57366
const TNext = 57367
const TLsh = 57368
const TRsh = 57369
const TURsh = 57370
const TDotDotDot = 57371
const TLParen = 57372
const TLBracket = 57373
const TIs = 57374
const TOr = 57375
const TAnd = 57376
const TEqeq = 57377
const TNeq = 57378
const TLte = 57379
const TGte = 57380
const TIdent = 57381
const TNumber = 57382
const TString = 57383
const TIDiv = 57384
const ASSIGN = 57385
const FUNC = 57386
const UNARY = 57387

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TDo",
	"TLocal",
	"TElseIf",
	"TThen",
	"TEnd",
	"TBreak",
	"TContinue",
	"TElse",
	"TFor",
	"TWhile",
	"TFunc",
	"TLambda",
	"TIf",
	"TReturn",
	"TReturnVoid",
	"TRepeat",
	"TUntil",
	"TNot",
	"TLabel",
	"TGoto",
	"TIn",
	"TNext",
	"TLsh",
	"TRsh",
	"TURsh",
	"TDotDotDot",
	"TLParen",
	"TLBracket",
	"TIs",
	"TOr",
	"TAnd",
	"TEqeq",
	"TNeq",
	"TLte",
	"TGte",
	"TIdent",
	"TNumber",
	"TString",
	"TIDiv",
	"'{'",
	"'['",
	"'('",
	"'='",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'#'",
	"'.'",
	"'&'",
	"'|'",
	"'~'",
	"'T'",
	"ASSIGN",
	"FUNC",
	"UNARY",
	"';'",
	"','",
	"')'",
	"']'",
	"'}'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:263

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 30,
	46, 84,
	65, 84,
	-2, 78,
	-1, 120,
	46, 85,
	65, 85,
	-2, 78,
}

const yyPrivate = 57344

const yyLast = 1587

var yyAct = [...]int{
	18, 43, 87, 30, 182, 65, 79, 142, 88, 171,
	170, 25, 89, 213, 66, 66, 202, 191, 42, 190,
	189, 185, 69, 145, 187, 72, 95, 143, 76, 77,
	78, 214, 194, 192, 82, 42, 41, 86, 146, 161,
	30, 138, 136, 38, 90, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 70, 126, 42, 168,
	120, 85, 30, 31, 128, 162, 42, 80, 132, 29,
	121, 117, 64, 166, 141, 156, 137, 139, 67, 124,
	147, 152, 81, 180, 149, 144, 150, 133, 26, 32,
	118, 134, 34, 33, 119, 118, 167, 68, 125, 129,
	172, 64, 131, 28, 173, 75, 73, 27, 42, 118,
	165, 56, 71, 135, 154, 155, 86, 157, 52, 53,
	54, 55, 57, 80, 148, 147, 66, 30, 40, 160,
	163, 74, 94, 39, 150, 37, 199, 174, 81, 92,
	30, 4, 3, 7, 151, 30, 177, 64, 31, 91,
	30, 10, 9, 150, 8, 188, 153, 56, 20, 186,
	2, 158, 1, 0, 193, 0, 54, 55, 57, 0,
	196, 197, 36, 0, 32, 201, 35, 34, 33, 0,
	0, 0, 0, 204, 0, 206, 203, 30, 0, 0,
	30, 0, 30, 0, 0, 31, 0, 0, 0, 0,
	216, 29, 0, 0, 0, 219, 0, 30, 0, 30,
	30, 195, 0, 223, 0, 198, 30, 200, 0, 36,
	26, 32, 0, 35, 34, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 28, 0, 0, 0, 27,
	0, 0, 215, 0, 217, 0, 218, 84, 0, 0,
	61, 62, 63, 0, 0, 224, 64, 44, 45, 50,
	51, 49, 48, 0, 0, 0, 56, 0, 0, 0,
	0, 46, 47, 52, 53, 54, 55, 57, 60, 0,
	0, 58, 59, 0, 0, 0, 0, 61, 62, 63,
	0, 0, 205, 64, 44, 45, 50, 51, 49, 48,
	0, 0, 0, 56, 0, 0, 0, 0, 46, 47,
	52, 53, 54, 55, 57, 60, 0, 0, 58, 59,
	0, 0, 0, 0, 0, 6, 19, 184, 0, 175,
	12, 13, 183, 23, 21, 0, 31, 24, 17, 16,
	22, 0, 29, 15, 14, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 26, 32, 0, 35, 34, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 28, 0, 0, 0,
	27, 61, 62, 63, 0, 11, 0, 64, 44, 45,
	50, 51, 49, 48, 0, 0, 0, 56, 0, 0,
	0, 0, 46, 47, 52, 53, 54, 55, 57, 60,
	0, 0, 58, 59, 0, 6, 19, 0, 0, 225,
	12, 13, 159, 23, 21, 0, 31, 24, 17, 16,
	22, 0, 29, 15, 14, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 26, 32, 0, 35, 34, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 28, 0, 6, 19,
	27, 0, 222, 12, 13, 11, 23, 21, 0, 31,
	24, 17, 16, 22, 0, 29, 15, 14, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 36, 26, 32, 0, 35, 34, 33,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 28,
	0, 6, 19, 27, 0, 220, 12, 13, 11, 23,
	21, 0, 31, 24, 17, 16, 22, 0, 29, 15,
	14, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 36, 26, 32, 0,
	35, 34, 33, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 28, 0, 6, 19, 27, 0, 211, 12,
	13, 11, 23, 21, 0, 31, 24, 17, 16, 22,
	0, 29, 15, 14, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 36,
	26, 32, 0, 35, 34, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 28, 0, 0, 0, 27,
	61, 62, 63, 0, 11, 0, 64, 44, 45, 50,
	51, 49, 48, 0, 0, 0, 56, 0, 0, 0,
	0, 46, 47, 52, 53, 54, 55, 57, 60, 6,
	19, 58, 59, 207, 12, 13, 0, 23, 21, 209,
	31, 24, 17, 16, 22, 0, 29, 15, 14, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 26, 32, 0, 35, 34,
	33, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	28, 0, 6, 19, 27, 0, 178, 12, 13, 11,
	23, 21, 0, 31, 24, 17, 16, 22, 0, 29,
	15, 14, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 26, 32,
	0, 35, 34, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 28, 0, 6, 19, 27, 0, 176,
	12, 13, 11, 23, 21, 0, 31, 24, 17, 16,
	22, 0, 29, 15, 14, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 26, 32, 0, 35, 34, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 28, 0, 0, 0,
	27, 61, 62, 63, 0, 11, 0, 64, 44, 45,
	50, 51, 49, 48, 0, 0, 0, 56, 0, 0,
	0, 0, 46, 47, 52, 53, 54, 55, 57, 60,
	0, 0, 58, 59, 6, 19, 0, 0, 164, 12,
	13, 169, 23, 21, 0, 31, 24, 17, 16, 22,
	0, 29, 15, 14, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	26, 32, 0, 35, 34, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 28, 0, 0, 0, 27,
	61, 62, 63, 0, 11, 0, 64, 44, 45, 50,
	51, 49, 48, 0, 0, 0, 56, 0, 0, 0,
	0, 46, 47, 52, 53, 54, 55, 57, 60, 0,
	0, 58, 59, 6, 19, 0, 0, 31, 12, 13,
	140, 23, 21, 29, 31, 24, 17, 16, 22, 123,
	29, 15, 14, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 26, 32, 0, 35, 34, 33, 36, 26,
	32, 0, 35, 34, 33, 0, 0, 28, 0, 0,
	0, 27, 0, 0, 28, 0, 6, 19, 27, 0,
	93, 12, 13, 11, 23, 21, 0, 31, 24, 17,
	16, 22, 0, 29, 15, 14, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 26, 32, 0, 35, 34, 33, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 28, 0, 6,
	19, 27, 0, 0, 12, 13, 11, 23, 21, 5,
	31, 24, 17, 16, 22, 0, 29, 15, 14, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 26, 32, 0, 35, 34,
	33, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	28, 0, 6, 19, 27, 0, 31, 12, 13, 11,
	23, 21, 29, 31, 24, 17, 16, 22, 0, 29,
	15, 14, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 26, 32, 0, 134, 34, 33, 36, 26, 32,
	0, 35, 34, 33, 0, 0, 28, 0, 0, 0,
	27, 0, 0, 28, 0, 0, 0, 27, 61, 62,
	63, 0, 11, 0, 64, 44, 45, 50, 51, 49,
	48, 221, 0, 0, 56, 0, 0, 0, 0, 46,
	47, 52, 53, 54, 55, 57, 60, 0, 0, 58,
	59, 0, 0, 61, 62, 63, 0, 179, 0, 64,
	44, 45, 50, 51, 49, 48, 0, 212, 0, 56,
	0, 0, 0, 0, 46, 47, 52, 53, 54, 55,
	57, 60, 0, 0, 58, 59, 61, 62, 63, 0,
	0, 0, 64, 44, 45, 50, 51, 49, 48, 210,
	0, 0, 56, 0, 0, 0, 0, 46, 47, 52,
	53, 54, 55, 57, 60, 0, 0, 58, 59, 0,
	0, 61, 62, 63, 0, 0, 0, 64, 44, 45,
	50, 51, 49, 48, 181, 0, 0, 56, 0, 0,
	0, 0, 46, 47, 52, 53, 54, 55, 57, 60,
	0, 0, 58, 59, 0, 0, 61, 62, 63, 0,
	0, 0, 64, 44, 45, 50, 51, 49, 48, 0,
	127, 0, 56, 0, 0, 0, 0, 46, 47, 52,
	53, 54, 55, 57, 60, 0, 0, 58, 59, 61,
	62, 63, 0, 0, 0, 64, 44, 45, 50, 51,
	49, 48, 122, 0, 0, 56, 0, 0, 0, 0,
	46, 47, 52, 53, 54, 55, 57, 60, 0, 0,
	58, 59, 0, 0, 61, 62, 63, 0, 0, 0,
	64, 44, 45, 50, 51, 49, 48, 0, 0, 0,
	56, 0, 0, 0, 0, 46, 47, 52, 53, 54,
	55, 57, 60, 0, 0, 58, 59, 61, 62, 63,
	0, 0, 0, 64, 44, 45, 50, 51, 49, 48,
	0, 0, 0, 56, 0, 0, 0, 0, 46, 47,
	52, 53, 54, 55, 57, 60, 0, 0, 58, 59,
	61, 62, 63, 0, 0, 0, 64, 0, 45, 50,
	51, 49, 48, 0, 0, 0, 56, 0, 0, 0,
	0, 46, 47, 52, 53, 54, 55, 57, 60, 0,
	0, 58, 59, 61, 62, 63, 0, 0, 0, 64,
	0, 0, 50, 51, 49, 48, 31, 0, 0, 56,
	0, 0, 29, 0, 46, 47, 52, 53, 54, 55,
	57, 60, 0, 0, 58, 59, 0, 0, 0, 0,
	133, 26, 32, 0, 134, 34, 33, 61, 62, 63,
	0, 0, 0, 64, 0, 0, 28, 0, 31, 0,
	27, 0, 0, 56, 29, 0, 0, 130, 0, 0,
	52, 53, 54, 55, 57, 60, 0, 0, 58, 59,
	0, 0, 36, 26, 32, 0, 35, 34, 33, 61,
	62, 63, 0, 83, 0, 64, 0, 0, 28, 0,
	0, 0, 27, 0, 0, 56, 0, 0, 0, 0,
	0, 0, 52, 53, 54, 55, 57,
}

var yyPact = [...]int{
	-1000, 1055, -1000, -1000, -1000, 106, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 104, 99, -1000, 942, 1381, 97,
	42, 942, -1000, 83, 942, 85, -1000, 942, 942, 942,
	-1000, 47, -1000, 1513, 190, -31, -1000, 103, 1002, -1000,
	120, -39, 1381, -1000, 942, 942, 942, 942, 942, 942,
	942, 942, 942, 942, 942, 942, 942, 942, 942, 942,
	942, 942, 942, 942, 942, 35, -1000, 942, 143, 1348,
	949, 43, 1313, 942, 70, 1471, -1000, -1000, -1000, -1000,
	-24, -25, 894, 942, -1000, -38, -1000, -42, -8, 942,
	-1000, 55, -1000, -1000, -1000, 942, 1414, 1447, 1491, 1491,
	1491, 1491, 1491, 1491, 125, 125, 50, 50, 50, 50,
	1533, 1533, 1533, 79, 79, 79, -1000, 942, 52, -39,
	-1000, 85, -1000, 942, 942, 46, 942, -1000, 365, -1000,
	-1000, 10, -42, -8, 58, 860, -1000, 54, -1000, 40,
	-1000, 805, -57, 942, -59, 71, 942, 271, 771, 47,
	1381, -39, -1000, 718, 1381, 1142, 69, 1280, 331, -1000,
	-45, -41, 1101, -46, -1000, -1000, -47, -1000, -49, -1000,
	-1000, -1000, -13, 942, 1381, -14, -1000, -1000, -1000, 942,
	942, -1000, 138, -1000, 942, -1000, -50, -1000, -42, -1000,
	-1000, -1000, 942, 234, 942, 665, 614, 1245, 580, -1000,
	1108, 1210, -1000, -53, 1381, -15, 1381, -1000, -1000, 942,
	-1000, -1000, -1000, -1000, 942, 527, 1177, 474, 331, 1381,
	-1000, -1000, -1000, -1000, 421, -1000,
}

var yyPgo = [...]int{
	0, 172, 43, 170, 149, 1, 168, 5, 0, 36,
	2, 11, 164, 162, 161, 4, 153, 152, 6, 7,
}

var yyR1 = [...]int{
	0, 1, 1, 2, 2, 3, 3, 4, 4, 4,
	4, 4, 4, 12, 12, 12, 12, 13, 13, 13,
	13, 13, 13, 14, 15, 15, 15, 17, 17, 18,
	18, 18, 18, 18, 18, 16, 16, 16, 16, 16,
	16, 5, 5, 5, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 6, 6, 7, 7, 9, 9,
	10, 10, 10, 10, 19, 19,
}

var yyR2 = [...]int{
	0, 0, 2, 0, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 2, 4, 3, 5, 4, 9,
	11, 9, 7, 6, 0, 2, 5, 5, 7, 2,
	3, 4, 2, 3, 4, 1, 1, 2, 3, 1,
	2, 1, 4, 3, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	4, 1, 3, 4, 2, 2, 4, 4, 1, 3,
	5, 5, 6, 7, 1, 3, 1, 3, 1, 3,
	3, 5, 5, 7, 0, 1,
}

var yyChk = [...]int{
	-1000, -1, -3, -17, -4, 14, 4, -16, -12, -13,
	-14, 64, 9, 10, 23, 22, 18, 17, -8, 5,
	-6, 13, 19, 12, 16, -11, 40, 59, 55, 21,
	-5, 15, 41, 45, 44, 43, 39, 39, -2, 39,
	39, -9, -8, -5, 33, 34, 47, 48, 38, 37,
	35, 36, 49, 50, 51, 52, 42, 53, 57, 58,
	54, 26, 27, 28, 32, -7, 39, 46, 65, -8,
	-2, 39, -8, 31, 56, 30, -8, -8, -8, -18,
	30, 45, -8, 50, 67, -9, 68, -10, 39, 43,
	-18, 56, -4, 8, 22, 65, -8, -8, -8, -8,
	-8, -8, -8, -8, -8, -8, -8, -8, -8, -8,
	-8, -8, -8, -8, -8, -8, -8, 46, 65, -9,
	-5, -11, 4, 20, 46, 65, 24, 7, -8, 39,
	66, -9, -10, 39, 43, -2, 66, -7, 66, -7,
	66, -8, -19, 65, -19, 65, 46, -8, -2, 39,
	-8, -9, 39, -2, -8, -8, 39, -8, -2, 67,
	-19, 29, 65, -19, 8, 66, 29, 66, 29, 66,
	67, 68, 39, 43, -8, 68, 8, -18, 8, 65,
	24, 4, -15, 11, 6, 66, -19, 65, -10, 66,
	66, 66, 46, -8, 46, -2, -8, -8, -2, 8,
	-2, -8, 66, -19, -8, 68, -8, 8, 4, 65,
	4, 8, 7, 66, 46, -2, -8, -2, -2, -8,
	8, 4, 8, -15, -2, 8,
}

var yyDef = [...]int{
	1, -2, 2, 5, 6, 0, 3, 8, 9, 10,
	11, 12, 35, 36, 0, 0, 39, 0, 13, 0,
	0, 0, 3, 0, 0, 44, 45, 0, 0, 0,
	-2, 0, 71, 0, 0, 0, 41, 0, 0, 37,
	0, 40, 88, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 14, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 68, 69, 3,
	0, 0, 0, 0, 74, 94, 75, 94, 0, 0,
	3, 0, 4, 7, 38, 0, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 0, 0, 16,
	-2, 0, 3, 0, 0, 0, 0, 3, 0, 43,
	79, 94, 94, 41, 0, 0, 29, 0, 32, 0,
	72, 0, 0, 95, 0, 95, 0, 0, 0, 0,
	89, 15, 87, 0, 18, 0, 0, 0, 24, 42,
	0, 94, 95, 0, 70, 30, 0, 33, 0, 73,
	76, 77, 0, 0, 90, 0, 27, 3, 17, 0,
	0, 3, 0, 3, 0, 80, 0, 95, 94, 81,
	31, 34, 0, 0, 0, 0, 0, 0, 0, 23,
	25, 0, 82, 0, 92, 0, 91, 28, 3, 0,
	3, 22, 3, 83, 0, 0, 0, 0, 24, 93,
	19, 3, 21, 26, 0, 20,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 55, 3, 53, 57, 3,
	45, 66, 51, 49, 65, 50, 56, 52, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 64,
	48, 46, 47, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 60, 3, 3, 3, 3, 3,
	3, 44, 3, 67, 54, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 43, 58, 68, 59,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 61, 62, 63,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:54
		{
			yyVAL.expr = __chain()
			yylex.(*Lexer).Stmts = yyVAL.expr
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:58
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[2].expr)
			yylex.(*Lexer).Stmts = yyVAL.expr
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:64
		{
			yyVAL.expr = __chain()
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:64
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[2].expr)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:67
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:68
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:71
		{
			yyVAL.expr = __do(yyDollar[2].expr)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:72
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:73
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:74
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:75
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:76
		{
			yyVAL.expr = emptyNode
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:79
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:82
		{
			yyVAL.expr = __chain()
			for _, v := range yyDollar[2].expr.Nodes() {
				yyVAL.expr = yyVAL.expr.append(__set(v, SNil).At(yyDollar[1].token))
			}
		}
	case 15:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:88
		{
			if len(yyDollar[4].expr.Nodes()) == 1 && len(yyDollar[2].expr.Nodes()) > 1 {
				tmp := randomVarname()
				yyVAL.expr = __chain(__set(tmp, yyDollar[4].expr.Nodes()[0]).At(yyDollar[1].token))
				for i, ident := range yyDollar[2].expr.Nodes() {
					yyVAL.expr = yyVAL.expr.append(__set(ident, __load(tmp, Int(int64(i))).At(yyDollar[1].token)).At(yyDollar[1].token))
				}
			} else {
				yyVAL.expr = __local(yyDollar[2].expr.Nodes(), yyDollar[4].expr.Nodes(), yyDollar[1].token)
			}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:99
		{
			if len(yyDollar[3].expr.Nodes()) == 1 && len(yyDollar[1].expr.Nodes()) > 1 {
				tmp := randomVarname()
				yyVAL.expr = __chain(__set(tmp, yyDollar[3].expr.Nodes()[0]).At(yyDollar[2].token))
				for i, decl := range yyDollar[1].expr.Nodes() {
					x := decl.moveLoadStore(__move, __load(tmp, Int(int64(i))).At(yyDollar[2].token)).At(yyDollar[2].token)
					yyVAL.expr = yyVAL.expr.append(x)
				}
			} else {
				yyVAL.expr = __moveMulti(yyDollar[1].expr.Nodes(), yyDollar[3].expr.Nodes(), yyDollar[2].token)
			}
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:113
		{
			yyVAL.expr = __loop(emptyNode, __if(yyDollar[2].expr, yyDollar[4].expr, breakNode).At(yyDollar[1].token)).At(yyDollar[1].token)
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:116
		{
			yyVAL.expr = __loop(emptyNode, yyDollar[2].expr, __if(yyDollar[4].expr, breakNode, emptyNode).At(yyDollar[1].token)).At(yyDollar[1].token)
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:119
		{
			forVar, forEnd := Sym(yyDollar[2].token), randomVarname()
			cont := __inc(forVar, one).At(yyDollar[1].token)
			yyVAL.expr = __do(
				__set(forVar, yyDollar[4].expr).At(yyDollar[1].token),
				__set(forEnd, yyDollar[6].expr).At(yyDollar[1].token),
				__loop(
					cont,
					__if(
						__less(forVar, forEnd),
						__chain(yyDollar[8].expr, cont),
						breakNode,
					).At(yyDollar[1].token),
				).At(yyDollar[1].token),
			)
		}
	case 20:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:135
		{
			forVar, forEnd, forStep := Sym(yyDollar[2].token), randomVarname(), randomVarname()
			body := __chain(yyDollar[10].expr, __inc(forVar, forStep))
			yyVAL.expr = __do(
				__set(forVar, yyDollar[4].expr).At(yyDollar[1].token),
				__set(forEnd, yyDollar[6].expr).At(yyDollar[1].token),
				__set(forStep, yyDollar[8].expr).At(yyDollar[1].token),
			)
			if yyDollar[8].expr.IsNum() { // step is a static number, easy case
				if yyDollar[8].expr.IsNegativeNumber() {
					yyVAL.expr = yyVAL.expr.append(__loop(__inc(forVar, forStep), __if(__less(forEnd, forVar), body, breakNode).At(yyDollar[1].token)).At(yyDollar[1].token))
				} else {
					yyVAL.expr = yyVAL.expr.append(__loop(__inc(forVar, forStep), __if(__less(forVar, forEnd), body, breakNode).At(yyDollar[1].token)).At(yyDollar[1].token))
				}
			} else {
				yyVAL.expr = yyVAL.expr.append(__loop(
					__inc(forVar, forStep),
					__if(
						__less(zero, forStep).At(yyDollar[1].token),
						__if(__lessEq(forEnd, forVar), breakNode, body).At(yyDollar[1].token), // +step
						__if(__lessEq(forVar, forEnd), breakNode, body).At(yyDollar[1].token), // -step
					).At(yyDollar[1].token),
				).At(yyDollar[1].token))
			}
		}
	case 21:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:160
		{
			yyVAL.expr = __forIn(yyDollar[2].token, yyDollar[4].token, yyDollar[6].expr, yyDollar[8].expr, yyDollar[1].token)
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:161
		{
			yyVAL.expr = __forIn(yyDollar[2].token, yyDollar[1].token, yyDollar[4].expr, yyDollar[6].expr, yyDollar[1].token)
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).At(yyDollar[1].token)
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:167
		{
			yyVAL.expr = Nodes()
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:167
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:167
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).At(yyDollar[1].token)
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:170
		{
			yyVAL.expr = __func(yyDollar[2].token, yyDollar[3].expr, yyDollar[4].expr)
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:171
		{
			yyVAL.expr = __store(Sym(yyDollar[2].token), Str(yyDollar[4].token.Str), __func(__markupFuncName(yyDollar[2].token, yyDollar[4].token), yyDollar[5].expr, yyDollar[6].expr))
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:174
		{
			yyVAL.expr = emptyNode
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:175
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:176
		{
			yyVAL.expr = __dotdotdot(yyDollar[2].expr)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:177
		{
			yyVAL.expr = emptyNode
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:178
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:179
		{
			yyVAL.expr = __dotdotdot(yyDollar[2].expr)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.expr = Nodes(SBreak).At(yyDollar[1].token)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:183
		{
			yyVAL.expr = Nodes(SContinue).At(yyDollar[1].token)
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:184
		{
			yyVAL.expr = __goto(Sym(yyDollar[2].token)).At(yyDollar[1].token)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:185
		{
			yyVAL.expr = __label(Sym(yyDollar[2].token))
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.expr = __ret(SNil).At(yyDollar[1].token)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:187
		{
			if len(yyDollar[2].expr.Nodes()) == 1 {
				__findTailCall(yyDollar[2].expr.Nodes())
				yyVAL.expr = __ret(yyDollar[2].expr.Nodes()[0]).At(yyDollar[1].token)
			} else {
				yyVAL.expr = __ret(Nodes(SArray, yyDollar[2].expr)).At(yyDollar[1].token)
			}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.expr = Sym(yyDollar[1].token)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.expr = __load(yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:199
		{
			yyVAL.expr = __load(yyDollar[1].expr, Str(yyDollar[3].token.Str)).At(yyDollar[2].token)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:203
		{
			yyVAL.expr = Num(yyDollar[1].token.Str)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:204
		{
			yyVAL.expr = Nodes((SOr), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:205
		{
			yyVAL.expr = Nodes((SAnd), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.expr = Nodes((SLess), yyDollar[3].expr, yyDollar[1].expr).At(yyDollar[2].token)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:207
		{
			yyVAL.expr = Nodes((SLess), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:208
		{
			yyVAL.expr = Nodes((SLessEq), yyDollar[3].expr, yyDollar[1].expr).At(yyDollar[2].token)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:209
		{
			yyVAL.expr = Nodes((SLessEq), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:210
		{
			yyVAL.expr = Nodes((SEq), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:211
		{
			yyVAL.expr = Nodes((SNeq), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:212
		{
			yyVAL.expr = Nodes((SAdd), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:213
		{
			yyVAL.expr = Nodes((SSub), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:214
		{
			yyVAL.expr = Nodes((SMul), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:215
		{
			yyVAL.expr = Nodes((SDiv), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:216
		{
			yyVAL.expr = Nodes((SIDiv), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:217
		{
			yyVAL.expr = Nodes((SMod), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.expr = Nodes((SBitAnd), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:219
		{
			yyVAL.expr = Nodes((SBitOr), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:220
		{
			yyVAL.expr = Nodes((SBitXor), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:221
		{
			yyVAL.expr = Nodes((SBitLsh), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:222
		{
			yyVAL.expr = Nodes((SBitRsh), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:223
		{
			yyVAL.expr = Nodes((SBitURsh), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:224
		{
			yyVAL.expr = Nodes((SIs), yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:225
		{
			yyVAL.expr = Nodes((SBitNot), yyDollar[2].expr).At(yyDollar[1].token)
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:226
		{
			yyVAL.expr = Nodes((SLen), yyDollar[2].expr).At(yyDollar[1].token)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:227
		{
			yyVAL.expr = Nodes((SNot), yyDollar[2].expr).At(yyDollar[1].token)
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:230
		{
			yyVAL.expr = __lambda(__markupLambdaName(yyDollar[1].token), yyDollar[2].expr, yyDollar[3].expr)
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:231
		{
			yyVAL.expr = Str(yyDollar[1].token.Str)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:232
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:233
		{
			yyVAL.expr = Nodes(SSub, zero, yyDollar[3].expr).At(yyDollar[1].token)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:234
		{
			yyVAL.expr = Nodes(SArray, emptyNode).At(yyDollar[1].token)
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:235
		{
			yyVAL.expr = Nodes(SObject, emptyNode).At(yyDollar[1].token)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:236
		{
			yyVAL.expr = Nodes(SArray, yyDollar[2].expr).At(yyDollar[1].token)
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:237
		{
			yyVAL.expr = Nodes(SObject, yyDollar[2].expr).At(yyDollar[1].token)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:238
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:239
		{
			yyVAL.expr = __call(yyDollar[1].expr, emptyNode).At(yyDollar[2].token)
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:240
		{
			yyVAL.expr = __call(yyDollar[1].expr, yyDollar[3].expr).At(yyDollar[2].token)
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:241
		{
			yyVAL.expr = __call(yyDollar[1].expr, Nodes(Nodes(SObject, yyDollar[3].expr).At(yyDollar[2].token))).At(yyDollar[2].token)
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:242
		{
			yyVAL.expr = __call(yyDollar[1].expr, __dotdotdot(yyDollar[3].expr)).At(yyDollar[2].token)
		}
	case 83:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:243
		{
			yyVAL.expr = __call(yyDollar[1].expr, yyDollar[3].expr.append(Nodes(SObject, yyDollar[5].expr).At(yyDollar[2].token))).At(yyDollar[2].token)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:246
		{
			yyVAL.expr = Nodes(yyDollar[1].expr)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:246
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[3].expr)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:249
		{
			yyVAL.expr = Nodes(Sym(yyDollar[1].token))
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:249
		{
			yyVAL.expr = yyDollar[1].expr.append(Sym(yyDollar[3].token))
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:252
		{
			yyVAL.expr = Nodes(yyDollar[1].expr)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:252
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[3].expr)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:255
		{
			yyVAL.expr = Nodes(Str(yyDollar[1].token.Str), yyDollar[3].expr)
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:256
		{
			yyVAL.expr = Nodes(yyDollar[2].expr, yyDollar[5].expr)
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:257
		{
			yyVAL.expr = yyDollar[1].expr.append(Str(yyDollar[3].token.Str)).append(yyDollar[5].expr)
		}
	case 93:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:258
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[4].expr).append(yyDollar[7].expr)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:261
		{
			yyVAL.expr = emptyNode
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:261
		{
			yyVAL.expr = emptyNode
		}
	}
	goto yystack /* stack new state and value */
}
