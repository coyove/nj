// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import "github.com/coyove/nj/typ"

func ss(yylex yyLexer) *Lexer { return yylex.(*Lexer) }

//line parser.go.y:27
type yySymType struct {
	yys   int
	token Token
	expr  Node
}

const TDo = 57346
const TLocal = 57347
const TElseIf = 57348
const TThen = 57349
const TEnd = 57350
const TBreak = 57351
const TContinue = 57352
const TElse = 57353
const TFor = 57354
const TWhile = 57355
const TFunc = 57356
const TIf = 57357
const TReturn = 57358
const TReturnVoid = 57359
const TRepeat = 57360
const TUntil = 57361
const TNot = 57362
const TLabel = 57363
const TGoto = 57364
const TIn = 57365
const TLsh = 57366
const TRsh = 57367
const TURsh = 57368
const TDotDotDot = 57369
const TLParen = 57370
const TLBracket = 57371
const TIs = 57372
const TOr = 57373
const TAnd = 57374
const TEqeq = 57375
const TNeq = 57376
const TLte = 57377
const TGte = 57378
const TIdent = 57379
const TNumber = 57380
const TString = 57381
const TIDiv = 57382
const TInv = 57383
const TAddEq = 57384
const TSubEq = 57385
const TMulEq = 57386
const TDivEq = 57387
const TIDivEq = 57388
const TModEq = 57389
const TBitAndEq = 57390
const TBitOrEq = 57391
const TBitXorEq = 57392
const TBitLshEq = 57393
const TBitRshEq = 57394
const TBitURshEq = 57395
const ASSIGN = 57396
const FUNC = 57397
const UNARY = 57398

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TDo",
	"TLocal",
	"TElseIf",
	"TThen",
	"TEnd",
	"TBreak",
	"TContinue",
	"TElse",
	"TFor",
	"TWhile",
	"TFunc",
	"TIf",
	"TReturn",
	"TReturnVoid",
	"TRepeat",
	"TUntil",
	"TNot",
	"TLabel",
	"TGoto",
	"TIn",
	"TLsh",
	"TRsh",
	"TURsh",
	"TDotDotDot",
	"TLParen",
	"TLBracket",
	"TIs",
	"TOr",
	"TAnd",
	"TEqeq",
	"TNeq",
	"TLte",
	"TGte",
	"TIdent",
	"TNumber",
	"TString",
	"TIDiv",
	"TInv",
	"TAddEq",
	"TSubEq",
	"TMulEq",
	"TDivEq",
	"TIDivEq",
	"TModEq",
	"TBitAndEq",
	"TBitOrEq",
	"TBitXorEq",
	"TBitLshEq",
	"TBitRshEq",
	"TBitURshEq",
	"'{'",
	"'['",
	"'('",
	"'='",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'#'",
	"'.'",
	"'&'",
	"'|'",
	"'~'",
	"':'",
	"')'",
	"','",
	"'T'",
	"ASSIGN",
	"FUNC",
	"UNARY",
	"';'",
	"']'",
	"'}'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:224

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 20,
	57, 105,
	73, 105,
	-2, 90,
	-1, 147,
	57, 106,
	73, 106,
	-2, 90,
}

const yyPrivate = 57344

const yyLast = 2004

var yyAct = [...]int{
	17, 229, 175, 210, 72, 38, 44, 245, 209, 244,
	145, 243, 145, 48, 222, 145, 20, 45, 219, 145,
	239, 119, 88, 144, 74, 91, 25, 208, 97, 98,
	99, 100, 178, 176, 101, 45, 107, 43, 240, 145,
	75, 73, 255, 109, 113, 116, 237, 188, 179, 224,
	20, 199, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 141, 103, 176, 73, 45, 220, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 147,
	185, 2, 187, 145, 168, 169, 36, 45, 142, 68,
	69, 70, 148, 20, 39, 71, 117, 195, 177, 217,
	73, 114, 146, 37, 89, 63, 73, 50, 49, 186,
	45, 73, 189, 30, 192, 20, 190, 39, 165, 182,
	111, 171, 40, 167, 173, 184, 145, 61, 62, 64,
	31, 26, 32, 65, 29, 45, 96, 94, 121, 120,
	90, 115, 191, 42, 41, 40, 112, 35, 34, 33,
	71, 39, 163, 197, 198, 93, 200, 227, 202, 28,
	193, 206, 118, 27, 170, 249, 207, 45, 164, 212,
	45, 45, 194, 190, 232, 95, 213, 214, 216, 40,
	218, 3, 223, 221, 5, 20, 50, 49, 8, 7,
	110, 181, 143, 6, 233, 105, 234, 19, 1, 0,
	20, 238, 0, 0, 0, 20, 0, 0, 0, 31,
	0, 32, 0, 0, 0, 0, 0, 246, 247, 0,
	0, 0, 251, 0, 50, 49, 35, 34, 33, 0,
	0, 45, 45, 0, 0, 50, 49, 256, 257, 0,
	0, 30, 0, 196, 265, 0, 20, 31, 201, 32,
	0, 267, 20, 0, 20, 0, 20, 0, 106, 26,
	32, 274, 29, 0, 35, 34, 33, 0, 0, 0,
	20, 0, 20, 20, 0, 35, 34, 33, 0, 20,
	0, 0, 0, 0, 0, 0, 0, 28, 0, 0,
	0, 27, 0, 0, 0, 0, 0, 0, 242, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 250, 0, 252, 4, 18, 231, 0, 0,
	11, 12, 230, 23, 21, 10, 24, 16, 15, 22,
	0, 30, 14, 13, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 268, 0, 269, 0, 0, 31, 26,
	32, 0, 29, 0, 275, 0, 0, 68, 69, 70,
	0, 0, 0, 71, 0, 35, 34, 33, 0, 0,
	0, 0, 0, 63, 4, 18, 0, 28, 276, 11,
	12, 27, 23, 21, 10, 24, 16, 15, 22, 9,
	30, 14, 13, 59, 60, 61, 62, 64, 67, 0,
	0, 65, 66, 0, 0, 0, 0, 31, 26, 32,
	0, 29, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 35, 34, 33, 0, 0, 0,
	0, 0, 0, 4, 18, 0, 28, 273, 11, 12,
	27, 23, 21, 10, 24, 16, 15, 22, 9, 30,
	14, 13, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 0, 0, 31, 26, 32, 0,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 35, 34, 33, 0, 0, 0, 0,
	0, 0, 4, 18, 0, 28, 271, 11, 12, 27,
	23, 21, 10, 24, 16, 15, 22, 9, 30, 14,
	13, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 31, 26, 32, 0, 29,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 35, 34, 33, 0, 0, 0, 0, 0,
	0, 4, 18, 0, 28, 264, 11, 12, 27, 23,
	21, 10, 24, 16, 15, 22, 9, 30, 14, 13,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 26, 32, 0, 29, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 35, 34, 33, 0, 0, 0, 0, 0, 0,
	4, 18, 0, 28, 262, 11, 12, 27, 23, 21,
	10, 24, 16, 15, 22, 9, 30, 14, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 31, 26, 32, 0, 29, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	35, 34, 33, 0, 0, 0, 0, 0, 0, 4,
	18, 0, 28, 258, 11, 12, 27, 23, 21, 10,
	24, 16, 15, 22, 9, 30, 14, 13, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 31, 26, 32, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 35,
	34, 33, 0, 0, 0, 0, 0, 0, 4, 18,
	0, 28, 225, 11, 12, 27, 23, 21, 10, 24,
	16, 15, 22, 9, 30, 14, 13, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 31, 26, 32, 0, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 35, 34,
	33, 0, 0, 0, 0, 0, 0, 4, 18, 0,
	28, 215, 11, 12, 27, 23, 21, 10, 24, 16,
	15, 22, 9, 30, 14, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	31, 26, 32, 0, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 35, 34, 33,
	0, 0, 0, 0, 0, 0, 4, 18, 0, 28,
	183, 11, 12, 27, 23, 21, 10, 24, 16, 15,
	22, 9, 30, 14, 13, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 31,
	26, 32, 0, 29, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 35, 34, 33, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 28, 0,
	0, 0, 27, 4, 18, 0, 0, 0, 11, 12,
	9, 23, 21, 10, 24, 16, 15, 22, 162, 30,
	14, 13, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 31, 26, 32, 0,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 35, 34, 33, 0, 0, 0, 0,
	0, 0, 4, 18, 0, 28, 108, 11, 12, 27,
	23, 21, 10, 24, 16, 15, 22, 9, 30, 14,
	13, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 31, 26, 32, 0, 29,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 35, 34, 33, 0, 0, 0, 0, 0,
	0, 4, 18, 0, 28, 0, 11, 12, 27, 23,
	21, 10, 24, 16, 15, 22, 9, 30, 14, 13,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 26, 32, 0, 29, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 69,
	70, 35, 34, 33, 71, 51, 52, 57, 58, 56,
	55, 0, 0, 28, 63, 0, 0, 27, 0, 0,
	0, 0, 0, 0, 0, 9, 0, 0, 0, 0,
	0, 0, 53, 54, 59, 60, 61, 62, 64, 67,
	0, 0, 65, 66, 0, 205, 0, 0, 68, 69,
	70, 0, 0, 204, 71, 51, 52, 57, 58, 56,
	55, 68, 69, 70, 63, 0, 0, 71, 51, 52,
	57, 58, 56, 55, 0, 0, 0, 63, 0, 0,
	0, 0, 53, 54, 59, 60, 61, 62, 64, 67,
	0, 259, 65, 66, 0, 53, 54, 59, 60, 61,
	62, 64, 67, 254, 0, 65, 66, 0, 0, 0,
	0, 68, 69, 70, 0, 0, 236, 71, 51, 52,
	57, 58, 56, 55, 0, 0, 0, 63, 68, 69,
	70, 0, 0, 0, 71, 51, 52, 57, 58, 56,
	55, 0, 0, 0, 63, 53, 54, 59, 60, 61,
	62, 64, 67, 0, 0, 65, 66, 0, 0, 0,
	260, 0, 53, 54, 59, 60, 61, 62, 64, 67,
	0, 0, 65, 66, 68, 69, 70, 253, 0, 0,
	71, 51, 52, 57, 58, 56, 55, 0, 0, 0,
	63, 68, 69, 70, 0, 0, 0, 71, 51, 52,
	57, 58, 56, 55, 0, 0, 0, 63, 53, 54,
	59, 60, 61, 62, 64, 67, 0, 0, 65, 66,
	0, 0, 0, 226, 0, 53, 54, 59, 60, 61,
	62, 64, 67, 0, 0, 65, 66, 68, 69, 70,
	203, 0, 0, 71, 51, 52, 57, 58, 56, 55,
	0, 0, 0, 63, 68, 69, 70, 0, 0, 0,
	71, 51, 52, 57, 58, 56, 55, 0, 0, 0,
	63, 53, 54, 59, 60, 61, 62, 64, 67, 0,
	0, 65, 66, 0, 0, 270, 0, 0, 53, 54,
	59, 60, 61, 62, 64, 67, 47, 0, 65, 66,
	0, 0, 174, 0, 0, 50, 49, 0, 0, 0,
	0, 30, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 31, 26,
	32, 0, 29, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 69, 70, 35, 34, 33, 71, 51,
	52, 57, 58, 56, 55, 0, 0, 28, 63, 0,
	0, 27, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 53, 54, 59, 60,
	61, 62, 64, 67, 0, 0, 65, 66, 0, 241,
	68, 69, 70, 0, 0, 0, 71, 51, 52, 57,
	58, 56, 55, 0, 0, 0, 63, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 49, 0, 0, 0,
	0, 30, 0, 0, 53, 54, 59, 60, 61, 62,
	64, 67, 272, 0, 65, 66, 0, 180, 31, 26,
	32, 0, 29, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 69, 70, 35, 34, 33, 71, 51,
	52, 57, 58, 56, 55, 0, 0, 28, 63, 0,
	0, 27, 0, 0, 0, 0, 0, 0, 0, 0,
	235, 263, 0, 0, 0, 0, 53, 54, 59, 60,
	61, 62, 64, 67, 0, 261, 65, 66, 68, 69,
	70, 0, 0, 0, 71, 51, 52, 57, 58, 56,
	55, 0, 0, 0, 63, 68, 69, 70, 0, 0,
	0, 71, 51, 52, 57, 58, 56, 55, 0, 0,
	0, 63, 53, 54, 59, 60, 61, 62, 64, 67,
	0, 228, 65, 66, 0, 0, 0, 0, 0, 53,
	54, 59, 60, 61, 62, 64, 67, 166, 0, 65,
	66, 68, 69, 70, 0, 0, 0, 71, 51, 52,
	57, 58, 56, 55, 68, 69, 70, 63, 0, 0,
	71, 51, 52, 57, 58, 56, 55, 0, 0, 0,
	63, 0, 0, 0, 0, 53, 54, 59, 60, 61,
	62, 64, 67, 161, 0, 65, 66, 0, 53, 54,
	59, 60, 61, 62, 64, 67, 0, 0, 65, 66,
	0, 0, 0, 68, 69, 70, 0, 0, 0, 71,
	51, 52, 57, 58, 56, 55, 68, 69, 70, 63,
	0, 0, 71, 51, 52, 57, 58, 56, 55, 0,
	0, 0, 63, 0, 0, 0, 0, 53, 54, 59,
	60, 61, 62, 64, 67, 0, 0, 65, 66, 0,
	53, 54, 59, 60, 61, 62, 64, 67, 0, 0,
	65, 66, 68, 69, 70, 0, 0, 0, 71, 0,
	52, 57, 58, 56, 55, 68, 69, 70, 63, 0,
	0, 71, 0, 0, 57, 58, 56, 55, 0, 0,
	0, 63, 0, 0, 0, 0, 53, 54, 59, 60,
	61, 62, 64, 67, 0, 0, 65, 66, 47, 53,
	54, 59, 60, 61, 62, 64, 67, 50, 49, 65,
	66, 0, 0, 30, 0, 46, 0, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 49, 0,
	31, 26, 32, 30, 29, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 35, 34, 33,
	31, 26, 32, 0, 29, 0, 0, 0, 0, 28,
	0, 0, 0, 27, 0, 172, 0, 35, 34, 33,
	50, 49, 0, 0, 0, 0, 30, 92, 0, 28,
	0, 0, 0, 27, 93, 0, 0, 0, 0, 0,
	50, 49, 0, 31, 26, 32, 30, 29, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	35, 34, 33, 31, 26, 32, 0, 29, 0, 0,
	0, 0, 28, 0, 0, 0, 27, 50, 49, 0,
	35, 34, 33, 30, 0, 0, 0, 0, 0, 0,
	0, 0, 28, 0, 0, 0, 27, 0, 0, 0,
	211, 26, 32, 0, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 35, 34, 33,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 28,
	0, 0, 0, 27,
}

var yyPact = [...]int{
	-1000, -1000, 1037, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	76, -1000, -1000, 117, 116, -1000, 1833, 1702, 73, -33,
	420, 1896, -1000, 113, 1876, 118, -1000, 1896, 1896, 1896,
	1896, -1000, -1000, 1896, 1381, 231, 978, 133, -1000, 84,
	79, -1000, 151, -52, -1000, 1702, 112, 111, -1000, 137,
	99, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896,
	1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896,
	1896, 182, -34, -1000, 1833, 220, 1896, 1896, 1896, 1896,
	1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1689, 919,
	105, 1640, 96, 1896, 103, 94, 1813, -1000, -1000, -1000,
	-1000, 1320, -1000, -40, -1000, -41, -9, 1456, -1000, -1000,
	92, 852, -1000, 63, 73, -1000, 20, 73, -1000, 1833,
	-1000, 95, 1748, 1761, 343, 343, 343, 343, 343, 343,
	75, 75, 130, 130, 130, 130, 130, 75, 75, 130,
	130, 130, 118, 220, 1833, 70, -52, -1000, 118, 1702,
	1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702,
	1702, -1000, 1896, 1896, 14, 1896, -1000, 147, 1257, 1064,
	1896, -1000, -1000, 0, -1000, -71, 1833, -77, 1933, 1833,
	1833, 793, 99, -1000, -1000, 37, -54, -1000, 4, -58,
	-1000, 1896, 11, 118, -52, -1000, 734, 1702, 1240, 144,
	1627, 321, 177, 1896, -1000, 1491, 1127, -26, -53, -1000,
	-1000, -19, 1408, -1000, -1000, -1000, -1000, -1000, -61, -1000,
	-1000, -63, -1000, 1702, -72, -1000, 1896, 1896, -1000, 167,
	-1000, 1896, -1000, 1194, 1114, -1000, -1000, -1000, -30, -1000,
	1833, 1833, 675, -1000, -1000, -1000, 1177, 1581, 616, -1000,
	1037, 1564, 557, 1896, -1000, -1000, -1000, -1000, -1000, -1000,
	1896, -1000, -1000, -1000, -1000, 1303, 498, 1518, 439, 321,
	-1000, -1000, -1000, -1000, -1000, 380, -1000,
}

var yyPgo = [...]int{
	0, 208, 91, 13, 207, 4, 0, 6, 37, 205,
	26, 203, 199, 198, 1, 194, 191, 5, 2,
}

var yyR1 = [...]int{
	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 12, 12, 12, 12,
	12, 12, 13, 13, 14, 14, 14, 16, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 15,
	15, 15, 15, 15, 15, 3, 3, 3, 7, 7,
	7, 7, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 4, 4, 5, 5, 8,
	8, 9, 9, 9, 9, 18, 18,
}

var yyR2 = [...]int{
	0, 1, 0, 2, 4, 2, 2, 2, 2, 2,
	1, 2, 4, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 4, 9, 11,
	9, 7, 6, 7, 0, 2, 5, 5, 7, 2,
	3, 4, 4, 5, 2, 3, 4, 4, 5, 1,
	1, 2, 3, 1, 2, 1, 4, 3, 1, 2,
	4, 5, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 2, 2, 2, 2,
	1, 8, 4, 1, 3, 2, 2, 4, 4, 6,
	5, 5, 3, 5, 6, 1, 3, 1, 3, 1,
	3, 3, 3, 5, 5, 0, 1,
}

var yyChk = [...]int{
	-1000, -1, -2, -16, 4, -15, -11, -12, -13, 78,
	14, 9, 10, 22, 21, 17, 16, -6, 5, -4,
	-3, 13, 18, 12, 15, -10, 38, 70, 66, 41,
	20, 37, 39, 56, 55, 54, -2, 37, -17, 28,
	56, 37, 37, -8, -7, -6, 22, 5, -3, 15,
	14, 31, 32, 58, 59, 36, 35, 33, 34, 60,
	61, 62, 63, 40, 64, 68, 69, 65, 24, 25,
	26, 30, -5, 37, 57, 73, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, -6, -2,
	37, -6, 21, 28, 29, 67, 28, -6, -6, -6,
	-6, -6, 79, -8, 80, -9, 37, -6, 8, -17,
	67, -2, 72, -5, 27, 72, -5, 27, 21, 73,
	37, 37, -6, -6, -6, -6, -6, -6, -6, -6,
	-6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
	-6, -6, -10, 20, 57, 73, -8, -3, -10, -6,
	-6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
	-6, 4, 19, 57, 73, 23, 7, 37, -6, -6,
	71, 37, 72, -8, 72, -18, 73, -18, 73, 57,
	71, -2, 37, 8, 72, 27, -5, 72, 27, -5,
	-7, 57, 29, -10, -8, 37, -2, -6, -6, 37,
	-6, -2, 21, 73, 79, 71, -6, -18, 27, 79,
	80, 37, -6, -7, -7, 8, -17, 72, -5, 72,
	72, -5, 72, -6, 38, 8, 73, 23, 4, -14,
	11, 6, 7, -6, -6, 79, 79, 72, -18, 73,
	57, 71, -2, 72, 72, 79, -6, -6, -2, 8,
	-2, -6, -2, 73, 79, 72, -7, -7, 8, 4,
	73, 4, 8, 7, 8, -6, -2, -6, -2, -2,
	72, 8, 4, 8, -14, -2, 8,
}

var yyDef = [...]int{
	2, -2, 1, 3, 2, 5, 6, 7, 8, 9,
	0, 49, 50, 0, 0, 53, 0, 10, 0, 0,
	-2, 0, 2, 0, 0, 62, 63, 0, 0, 0,
	0, 55, 93, 0, 0, 0, 0, 0, 2, 0,
	0, 51, 0, 54, 109, 58, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 11, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 88,
	89, 0, 95, 115, 96, 115, 55, 0, 4, 2,
	0, 0, 39, 0, 0, 44, 0, 0, 52, 0,
	59, 0, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 0, 0, 0, 13, -2, 0, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, 2, 0, 0, 0, 0, 2, 0, 0, 0,
	0, 57, 102, 115, 94, 0, 116, 0, 116, 0,
	0, 0, 0, 92, 40, 0, 0, 45, 0, 0,
	110, 0, 0, 85, 12, 108, 0, 27, 0, 0,
	0, 34, 0, 0, 56, 0, 0, 0, 115, 97,
	98, 55, 0, 111, 112, 37, 2, 41, 0, 42,
	46, 0, 47, 60, 0, 26, 0, 0, 2, 0,
	2, 0, 2, 0, 0, 101, 100, 103, 0, 116,
	0, 0, 0, 43, 48, 61, 0, 0, 0, 32,
	35, 0, 0, 0, 99, 104, 113, 114, 38, 2,
	0, 2, 31, 2, 33, 0, 0, 0, 0, 34,
	91, 28, 2, 30, 36, 0, 29,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 66, 3, 64, 68, 3,
	56, 72, 62, 60, 73, 61, 67, 63, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 71, 78,
	59, 57, 58, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 74, 3, 3, 3, 3, 3,
	3, 55, 3, 79, 65, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 54, 69, 80, 70,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 75, 76, 77,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:55
		{
			ss(yylex).Stmts = yyDollar[1].expr
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:58
		{
			yyVAL.expr = &Prog{}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:59
		{
			yyVAL.expr = yyDollar[1].expr.(*Prog).Append(yyDollar[2].expr)
		}
	case 4:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:60
		{
			yyDollar[3].expr.(*Prog).DoBlock = true
			yyVAL.expr = yyDollar[1].expr.(*Prog).Append(yyDollar[3].expr)
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:61
		{
			yyVAL.expr = yyDollar[1].expr.(*Prog).Append(yyDollar[2].expr)
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:62
		{
			yyVAL.expr = yyDollar[1].expr.(*Prog).Append(yyDollar[2].expr)
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:63
		{
			yyVAL.expr = yyDollar[1].expr.(*Prog).Append(yyDollar[2].expr)
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:64
		{
			yyVAL.expr = yyDollar[1].expr.(*Prog).Append(yyDollar[2].expr)
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:65
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:68
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:69
		{
			yyVAL.expr = ss(yylex).pDeclareAssign([]Node(yyDollar[2].expr.(IdentList)), nil, false, yyDollar[1].token)
		}
	case 12:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:70
		{
			yyVAL.expr = ss(yylex).pDeclareAssign([]Node(yyDollar[2].expr.(IdentList)), yyDollar[4].expr.(ExprList), false, yyDollar[1].token)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:71
		{
			yyVAL.expr = ss(yylex).pDeclareAssign([]Node(yyDollar[1].expr.(DeclList)), yyDollar[3].expr.(ExprList), true, yyDollar[2].token)
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:72
		{
			yyVAL.expr = assignLoadStore(yyDollar[1].expr, ss(yylex).pBinary(typ.OpAdd, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token), yyDollar[2].token)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:73
		{
			yyVAL.expr = assignLoadStore(yyDollar[1].expr, ss(yylex).pBinary(typ.OpSub, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token), yyDollar[2].token)
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:74
		{
			yyVAL.expr = assignLoadStore(yyDollar[1].expr, ss(yylex).pBinary(typ.OpMul, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token), yyDollar[2].token)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:75
		{
			yyVAL.expr = assignLoadStore(yyDollar[1].expr, ss(yylex).pBinary(typ.OpDiv, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token), yyDollar[2].token)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:76
		{
			yyVAL.expr = assignLoadStore(yyDollar[1].expr, ss(yylex).pBinary(typ.OpIDiv, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token), yyDollar[2].token)
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:77
		{
			yyVAL.expr = assignLoadStore(yyDollar[1].expr, ss(yylex).pBinary(typ.OpMod, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token), yyDollar[2].token)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:78
		{
			yyVAL.expr = assignLoadStore(yyDollar[1].expr, ss(yylex).pBitwise(typ.OpExtBitAnd, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token), yyDollar[2].token)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:79
		{
			yyVAL.expr = assignLoadStore(yyDollar[1].expr, ss(yylex).pBitwise(typ.OpExtBitOr, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token), yyDollar[2].token)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:80
		{
			yyVAL.expr = assignLoadStore(yyDollar[1].expr, ss(yylex).pBitwise(typ.OpExtBitXor, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token), yyDollar[2].token)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:81
		{
			yyVAL.expr = assignLoadStore(yyDollar[1].expr, ss(yylex).pBitwise(typ.OpExtBitLsh, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token), yyDollar[2].token)
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:82
		{
			yyVAL.expr = assignLoadStore(yyDollar[1].expr, ss(yylex).pBitwise(typ.OpExtBitRsh, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token), yyDollar[2].token)
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:83
		{
			yyVAL.expr = assignLoadStore(yyDollar[1].expr, ss(yylex).pBitwise(typ.OpExtBitURsh, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token), yyDollar[2].token)
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:86
		{
			yyVAL.expr = ss(yylex).pLoop(&If{yyDollar[2].expr, yyDollar[4].expr, emptyBreak})
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:87
		{
			yyVAL.expr = ss(yylex).pLoop(yyDollar[2].expr, &If{yyDollar[4].expr, emptyBreak, emptyProg})
		}
	case 28:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:88
		{
			yyVAL.expr = ss(yylex).pForRange(yyDollar[2].token, yyDollar[4].expr, yyDollar[6].expr, one, yyDollar[8].expr, yyDollar[1].token)
		}
	case 29:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:89
		{
			yyVAL.expr = ss(yylex).pForRange(yyDollar[2].token, yyDollar[4].expr, yyDollar[6].expr, yyDollar[8].expr, yyDollar[10].expr, yyDollar[1].token)
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:90
		{
			yyVAL.expr = ss(yylex).pForIn(yyDollar[2].token, yyDollar[4].token, yyDollar[6].expr, yyDollar[8].expr, yyDollar[1].token)
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:91
		{
			yyVAL.expr = ss(yylex).pForIn(yyDollar[2].token, yyDollar[1].token, yyDollar[4].expr, yyDollar[6].expr, yyDollar[1].token)
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:94
		{
			yyVAL.expr = &If{yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:95
		{
			yyVAL.expr = &If{ss(yylex).Int(0), ss(yylex).pProg(false, &GotoLabel{yyDollar[3].token.Str, false, yyDollar[1].token.Line()}, yyDollar[6].expr), emptyProg}
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:100
		{
			yyVAL.expr = nil
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:101
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:102
		{
			yyVAL.expr = &If{yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:105
		{
			yyVAL.expr = ss(yylex).pFunc(false, yyDollar[2].token, yyDollar[3].expr, yyDollar[4].expr, yyDollar[1].token)
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:108
		{
			m := ss(yylex).pFunc(true, __markupFuncName(yyDollar[2].token, yyDollar[4].token), yyDollar[5].expr, yyDollar[6].expr, yyDollar[1].token)
			yyVAL.expr = &Tenary{typ.OpStore, Sym(yyDollar[2].token), ss(yylex).Str(yyDollar[4].token.Str), m, yyDollar[1].token.Line()}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:114
		{
			yyVAL.expr = (IdentList)(nil)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:115
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:116
		{
			yyVAL.expr = IdentVarargList{yyDollar[2].expr.(IdentList)}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:117
		{
			yyVAL.expr = IdentVarargExpandList{nil, yyDollar[3].expr.(IdentList)}
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:118
		{
			yyVAL.expr = IdentVarargExpandList{yyDollar[2].expr.(IdentList), yyDollar[4].expr.(IdentList)}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:119
		{
			yyVAL.expr = (IdentList)(nil)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:120
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:121
		{
			yyVAL.expr = IdentVarargList{yyDollar[2].expr.(IdentList)}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:122
		{
			yyVAL.expr = IdentVarargExpandList{nil, yyDollar[3].expr.(IdentList)}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:123
		{
			yyVAL.expr = IdentVarargExpandList{yyDollar[2].expr.(IdentList), yyDollar[4].expr.(IdentList)}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:126
		{
			yyVAL.expr = &BreakContinue{true, yyDollar[1].token.Line()}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:127
		{
			yyVAL.expr = &BreakContinue{false, yyDollar[1].token.Line()}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:128
		{
			yyVAL.expr = &GotoLabel{yyDollar[2].token.Str, true, yyDollar[1].token.Line()}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:129
		{
			yyVAL.expr = &GotoLabel{yyDollar[2].token.Str, false, yyDollar[1].token.Line()}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:130
		{
			yyVAL.expr = &Unary{typ.OpRet, SNil, yyDollar[1].token.Line()}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:131
		{
			if el := yyDollar[2].expr.(ExprList); len(el) == 1 {
				ss(yylex).pFindTailCall(el[0])
				yyVAL.expr = &Unary{typ.OpRet, el[0], yyDollar[1].token.Line()}
			} else {
				yyVAL.expr = &Unary{typ.OpRet, yyDollar[2].expr, yyDollar[1].token.Line()}
			}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:141
		{
			yyVAL.expr = Sym(yyDollar[1].token)
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:144
		{
			yyVAL.expr = &Tenary{typ.OpLoad, yyDollar[1].expr, yyDollar[3].expr, Address(typ.RegA), yyDollar[2].token.Line()}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:147
		{
			yyVAL.expr = &Tenary{typ.OpLoad, yyDollar[1].expr, ss(yylex).Str(yyDollar[3].token.Str), Address(typ.RegA), yyDollar[2].token.Line()}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:152
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:153
		{
			yyVAL.expr = ss(yylex).Str(yyDollar[2].token.Str)
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:154
		{
			yyVAL.expr = ss(yylex).pDeclareAssign([]Node{Sym(yyDollar[2].token)}, ExprList{yyDollar[4].expr}, false, yyDollar[1].token)
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:155
		{
			yyVAL.expr = &Declare{Sym(yyDollar[2].token), ss(yylex).pArrayN(yyDollar[4].token.Str), yyDollar[1].token.Line()}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:158
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:159
		{
			yyVAL.expr = ss(yylex).Num(yyDollar[1].token.Str)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:160
		{
			yyVAL.expr = &Or{yyDollar[1].expr, yyDollar[3].expr}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:161
		{
			yyVAL.expr = &And{yyDollar[1].expr, yyDollar[3].expr}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:162
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpLess, yyDollar[3].expr, yyDollar[1].expr, yyDollar[2].token)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:163
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpLess, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpLessEq, yyDollar[3].expr, yyDollar[1].expr, yyDollar[2].token)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:165
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpLessEq, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:166
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpEq, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:167
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpNeq, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:168
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpAdd, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:169
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpSub, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:170
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpMul, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:171
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpDiv, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:172
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpIDiv, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:173
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpMod, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:174
		{
			yyVAL.expr = ss(yylex).pBitwise(typ.OpExtBitAnd, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:175
		{
			yyVAL.expr = ss(yylex).pBitwise(typ.OpExtBitOr, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:176
		{
			yyVAL.expr = ss(yylex).pBitwise(typ.OpExtBitXor, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:177
		{
			yyVAL.expr = ss(yylex).pBitwise(typ.OpExtBitLsh, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:178
		{
			yyVAL.expr = ss(yylex).pBitwise(typ.OpExtBitRsh, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:179
		{
			yyVAL.expr = ss(yylex).pBitwise(typ.OpExtBitURsh, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:180
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpIsProto, yyDollar[1].expr, yyDollar[3].expr, yyDollar[2].token)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:181
		{
			yyVAL.expr = pUnary(typ.OpNot, ss(yylex).pBinary(typ.OpIsProto, yyDollar[1].expr, yyDollar[4].expr, yyDollar[2].token), yyDollar[2].token)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.expr = ss(yylex).pBitwise(typ.OpExtBitXor, ss(yylex).Int(-1), yyDollar[2].expr, yyDollar[1].token)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:183
		{
			yyVAL.expr = pUnary(typ.OpLen, yyDollar[2].expr, yyDollar[1].token)
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:184
		{
			yyVAL.expr = ss(yylex).pBinary(typ.OpSub, zero, yyDollar[2].expr, yyDollar[1].token)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:185
		{
			yyVAL.expr = pUnary(typ.OpNot, yyDollar[2].expr, yyDollar[1].token)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:188
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:189
		{
			yyVAL.expr = &If{yyDollar[3].expr, &Assign{Sa, yyDollar[5].expr, yyDollar[1].token.Line()}, &Assign{Sa, yyDollar[7].expr, yyDollar[1].token.Line()}}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.expr = ss(yylex).pFunc(false, __markupLambdaName(yyDollar[1].token), yyDollar[2].expr, yyDollar[3].expr, yyDollar[1].token)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.expr = ss(yylex).Str(yyDollar[1].token.Str)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:193
		{
			yyVAL.expr = ss(yylex).pEmptyArray()
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.expr = ss(yylex).pEmptyObject()
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:195
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 99:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.expr = &Tenary{typ.OpSlice, yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr, yyDollar[2].token.Line()}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.expr = &Tenary{typ.OpSlice, yyDollar[1].expr, zero, yyDollar[4].expr, yyDollar[2].token.Line()}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:199
		{
			yyVAL.expr = &Tenary{typ.OpSlice, yyDollar[1].expr, yyDollar[3].expr, ss(yylex).Int(-1), yyDollar[2].token.Line()}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:200
		{
			yyVAL.expr = &Call{typ.OpCall, yyDollar[1].expr, ExprList(nil), false, yyDollar[2].token.Line()}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.expr = &Call{typ.OpCall, yyDollar[1].expr, yyDollar[3].expr.(ExprList), false, yyDollar[2].token.Line()}
		}
	case 104:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.expr = &Call{typ.OpCall, yyDollar[1].expr, yyDollar[3].expr.(ExprList), true, yyDollar[2].token.Line()}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:205
		{
			yyVAL.expr = DeclList{yyDollar[1].expr}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.expr = append(yyDollar[1].expr.(DeclList), yyDollar[3].expr)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:209
		{
			yyVAL.expr = IdentList{Sym(yyDollar[1].token)}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:210
		{
			yyVAL.expr = append(yyDollar[1].expr.(IdentList), Sym(yyDollar[3].token))
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:213
		{
			yyVAL.expr = ss(yylex).pArray(nil, yyDollar[1].expr)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:214
		{
			yyVAL.expr = ss(yylex).pArray(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:217
		{
			yyVAL.expr = ss(yylex).pObject(nil, ss(yylex).Str(yyDollar[1].token.Str), yyDollar[3].expr)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.expr = ss(yylex).pObject(nil, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:219
		{
			yyVAL.expr = ss(yylex).pObject(yyDollar[1].expr, ss(yylex).Str(yyDollar[3].token.Str), yyDollar[5].expr)
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:220
		{
			yyVAL.expr = ss(yylex).pObject(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:222
		{
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:222
		{
		}
	}
	goto yystack /* stack new state and value */
}
